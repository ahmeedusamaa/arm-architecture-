
Drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000470  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005a0  080005a8  000105a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005a0  080005a0  000105a8  2**0
                  CONTENTS
  4 .ARM          00000000  080005a0  080005a0  000105a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005a0  080005a8  000105a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005a0  080005a0  000105a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005a4  080005a4  000105a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  080005a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  080005a8  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037cc  00000000  00000000  000105d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000896  00000000  00000000  00013d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b1c  00000000  00000000  00014633  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c8  00000000  00000000  00015150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  00015318  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001e5a  00000000  00000000  00015498  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001c81  00000000  00000000  000172f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00012c92  00000000  00000000  00018f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002bc05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005cc  00000000  00000000  0002bc80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000588 	.word	0x08000588

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000588 	.word	0x08000588

08000170 <OS_SVC_services>:
{
	return a+b+c;
}

void OS_SVC_services(int *StackFramePointer)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	unsigned char SVC_number;
	unsigned char VAL1,VAL2;
	SVC_number = *( (unsigned char*) ( (unsigned char*)StackFramePointer[6] )-2 ) ;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	3318      	adds	r3, #24
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	3b02      	subs	r3, #2
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	73fb      	strb	r3, [r7, #15]
	VAL1 = StackFramePointer[0];
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	73bb      	strb	r3, [r7, #14]
	VAL2 = StackFramePointer[1];
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	3304      	adds	r3, #4
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	737b      	strb	r3, [r7, #13]

	switch(SVC_number)
 8000192:	7bfb      	ldrb	r3, [r7, #15]
 8000194:	2b02      	cmp	r3, #2
 8000196:	d00a      	beq.n	80001ae <OS_SVC_services+0x3e>
 8000198:	2b03      	cmp	r3, #3
 800019a:	d00e      	beq.n	80001ba <OS_SVC_services+0x4a>
 800019c:	2b01      	cmp	r3, #1
 800019e:	d000      	beq.n	80001a2 <OS_SVC_services+0x32>
			break;
		case 3:
			StackFramePointer[0] = VAL1 * VAL2;
			break;
		}
}
 80001a0:	e012      	b.n	80001c8 <OS_SVC_services+0x58>
			StackFramePointer[0] = VAL1 + VAL2;
 80001a2:	7bba      	ldrb	r2, [r7, #14]
 80001a4:	7b7b      	ldrb	r3, [r7, #13]
 80001a6:	441a      	add	r2, r3
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	601a      	str	r2, [r3, #0]
			break;
 80001ac:	e00c      	b.n	80001c8 <OS_SVC_services+0x58>
			StackFramePointer[0] = VAL1 - VAL2;
 80001ae:	7bba      	ldrb	r2, [r7, #14]
 80001b0:	7b7b      	ldrb	r3, [r7, #13]
 80001b2:	1ad2      	subs	r2, r2, r3
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	601a      	str	r2, [r3, #0]
			break;
 80001b8:	e006      	b.n	80001c8 <OS_SVC_services+0x58>
			StackFramePointer[0] = VAL1 * VAL2;
 80001ba:	7bbb      	ldrb	r3, [r7, #14]
 80001bc:	7b7a      	ldrb	r2, [r7, #13]
 80001be:	fb02 f203 	mul.w	r2, r2, r3
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	601a      	str	r2, [r3, #0]
			break;
 80001c6:	bf00      	nop
}
 80001c8:	bf00      	nop
 80001ca:	3714      	adds	r7, #20
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr

080001d2 <SVC_Handler>:
__attribute ((naked))void SVC_Handler()
{
	__asm("tst lr, #4 \n\t"
 80001d2:	f01e 0f04 	tst.w	lr, #4
 80001d6:	bf0c      	ite	eq
 80001d8:	f3ef 8008 	mrseq	r0, MSP
 80001dc:	f3ef 8009 	mrsne	r0, PSP
 80001e0:	f7ff bfc6 	b.w	8000170 <OS_SVC_services>
		  "ITE EQ \n\t"
		  "mrseq r0,MSP \n\t"
		  "mrsne r0,PSP \n\t"
		  "B OS_SVC_services");
}
 80001e4:	bf00      	nop

080001e6 <OS_SVC_Set>:

int OS_SVC_Set(int a, int b, int SVC_ID)
{
 80001e6:	b480      	push	{r7}
 80001e8:	b087      	sub	sp, #28
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	60f8      	str	r0, [r7, #12]
 80001ee:	60b9      	str	r1, [r7, #8]
 80001f0:	607a      	str	r2, [r7, #4]
	int result;
	switch(SVC_ID)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	d005      	beq.n	8000204 <OS_SVC_Set+0x1e>
 80001f8:	2b03      	cmp	r3, #3
 80001fa:	d005      	beq.n	8000208 <OS_SVC_Set+0x22>
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d105      	bne.n	800020c <OS_SVC_Set+0x26>
	{
	case 1:
		__asm("svc 0x01");
 8000200:	df01      	svc	1
		break;
 8000202:	e003      	b.n	800020c <OS_SVC_Set+0x26>
	case 2:
		__asm("svc 0x02");
 8000204:	df02      	svc	2
		break;
 8000206:	e001      	b.n	800020c <OS_SVC_Set+0x26>
	case 3:
		__asm("svc 0x03");
 8000208:	df03      	svc	3
		break;
 800020a:	bf00      	nop
	}
	return result;
 800020c:	697b      	ldr	r3, [r7, #20]
}
 800020e:	4618      	mov	r0, r3
 8000210:	371c      	adds	r7, #28
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr

08000218 <main>:
	}

}

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
//
//
//	MainOs();

	int result;
	result = OS_SVC_Set(3,2,1);
 800021e:	2201      	movs	r2, #1
 8000220:	2102      	movs	r1, #2
 8000222:	2003      	movs	r0, #3
 8000224:	f7ff ffdf 	bl	80001e6 <OS_SVC_Set>
 8000228:	6078      	str	r0, [r7, #4]
	result = OS_SVC_Set(3,2,2);
 800022a:	2202      	movs	r2, #2
 800022c:	2102      	movs	r1, #2
 800022e:	2003      	movs	r0, #3
 8000230:	f7ff ffd9 	bl	80001e6 <OS_SVC_Set>
 8000234:	6078      	str	r0, [r7, #4]
	result = OS_SVC_Set(3,2,3);
 8000236:	2203      	movs	r2, #3
 8000238:	2102      	movs	r1, #2
 800023a:	2003      	movs	r0, #3
 800023c:	f7ff ffd3 	bl	80001e6 <OS_SVC_Set>
 8000240:	6078      	str	r0, [r7, #4]

	while(1){
		if(IRQ_flag){
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <main+0x3c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d0fb      	beq.n	8000242 <main+0x2a>
			IRQ_flag = 0;
 800024a:	4b02      	ldr	r3, [pc, #8]	; (8000254 <main+0x3c>)
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
		if(IRQ_flag){
 8000250:	e7f7      	b.n	8000242 <main+0x2a>
 8000252:	bf00      	nop
 8000254:	2000001c 	.word	0x2000001c

08000258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000258:	480d      	ldr	r0, [pc, #52]	; (8000290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800025c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000260:	480c      	ldr	r0, [pc, #48]	; (8000294 <LoopForever+0x6>)
  ldr r1, =_edata
 8000262:	490d      	ldr	r1, [pc, #52]	; (8000298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000264:	4a0d      	ldr	r2, [pc, #52]	; (800029c <LoopForever+0xe>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000268:	e002      	b.n	8000270 <LoopCopyDataInit>

0800026a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800026c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026e:	3304      	adds	r3, #4

08000270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000274:	d3f9      	bcc.n	800026a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000278:	4c0a      	ldr	r4, [pc, #40]	; (80002a4 <LoopForever+0x16>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800027c:	e001      	b.n	8000282 <LoopFillZerobss>

0800027e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000280:	3204      	adds	r2, #4

08000282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000284:	d3fb      	bcc.n	800027e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000286:	f000 f95b 	bl	8000540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028a:	f7ff ffc5 	bl	8000218 <main>

0800028e <LoopForever>:

LoopForever:
    b LoopForever
 800028e:	e7fe      	b.n	800028e <LoopForever>
  ldr   r0, =_estack
 8000290:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000298:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800029c:	080005a8 	.word	0x080005a8
  ldr r2, =_sbss
 80002a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a4:	20000068 	.word	0x20000068

080002a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a8:	e7fe      	b.n	80002a8 <ADC1_2_IRQHandler>
	...

080002ac <EXTI0_IRQHandler>:
*================================================================
*                          ISR functions
*================================================================
*/
void EXTI0_IRQHandler (void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<0;
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <EXTI0_IRQHandler+0x1c>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <EXTI0_IRQHandler+0x1c>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[0]();
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <EXTI0_IRQHandler+0x20>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4798      	blx	r3
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010400 	.word	0x40010400
 80002cc:	2000002c 	.word	0x2000002c

080002d0 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<1;
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <EXTI1_IRQHandler+0x1c>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <EXTI1_IRQHandler+0x1c>)
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[1]();
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <EXTI1_IRQHandler+0x20>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	4798      	blx	r3
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40010400 	.word	0x40010400
 80002f0:	2000002c 	.word	0x2000002c

080002f4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<2;
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <EXTI2_IRQHandler+0x1c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <EXTI2_IRQHandler+0x1c>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[2]();
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <EXTI2_IRQHandler+0x20>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4798      	blx	r3
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010400 	.word	0x40010400
 8000314:	2000002c 	.word	0x2000002c

08000318 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<3;
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <EXTI3_IRQHandler+0x1c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <EXTI3_IRQHandler+0x1c>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[3]();
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <EXTI3_IRQHandler+0x20>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	4798      	blx	r3
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010400 	.word	0x40010400
 8000338:	2000002c 	.word	0x2000002c

0800033c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<4;
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <EXTI4_IRQHandler+0x1c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <EXTI4_IRQHandler+0x1c>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[4]();
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <EXTI4_IRQHandler+0x20>)
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	4798      	blx	r3
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010400 	.word	0x40010400
 800035c:	2000002c 	.word	0x2000002c

08000360 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CALLBACK[5](); }
 8000364:	4b26      	ldr	r3, [pc, #152]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	2b00      	cmp	r3, #0
 800036e:	d008      	beq.n	8000382 <EXTI9_5_IRQHandler+0x22>
 8000370:	4b23      	ldr	r3, [pc, #140]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a22      	ldr	r2, [pc, #136]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6153      	str	r3, [r2, #20]
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CALLBACK[6](); }
 8000382:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800038a:	2b00      	cmp	r3, #0
 800038c:	d008      	beq.n	80003a0 <EXTI9_5_IRQHandler+0x40>
 800038e:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CALLBACK[7](); }
 80003a0:	4b17      	ldr	r3, [pc, #92]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d008      	beq.n	80003be <EXTI9_5_IRQHandler+0x5e>
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a13      	ldr	r2, [pc, #76]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b6:	6153      	str	r3, [r2, #20]
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003ba:	69db      	ldr	r3, [r3, #28]
 80003bc:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CALLBACK[8](); }
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <EXTI9_5_IRQHandler+0x7c>
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a0c      	ldr	r2, [pc, #48]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003d8:	6a1b      	ldr	r3, [r3, #32]
 80003da:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CALLBACK[9](); }
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d008      	beq.n	80003fa <EXTI9_5_IRQHandler+0x9a>
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f2:	6153      	str	r3, [r2, #20]
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f8:	4798      	blx	r3

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40010400 	.word	0x40010400
 8000404:	2000002c 	.word	0x2000002c

08000408 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CALLBACK[10](); }
 800040c:	4b2d      	ldr	r3, [pc, #180]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000414:	2b00      	cmp	r3, #0
 8000416:	d008      	beq.n	800042a <EXTI15_10_IRQHandler+0x22>
 8000418:	4b2a      	ldr	r3, [pc, #168]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a29      	ldr	r2, [pc, #164]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800041e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000422:	6153      	str	r3, [r2, #20]
 8000424:	4b28      	ldr	r3, [pc, #160]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 8000426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000428:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CALLBACK[11](); }
 800042a:	4b26      	ldr	r3, [pc, #152]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000432:	2b00      	cmp	r3, #0
 8000434:	d008      	beq.n	8000448 <EXTI15_10_IRQHandler+0x40>
 8000436:	4b23      	ldr	r3, [pc, #140]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a22      	ldr	r2, [pc, #136]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800043c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b21      	ldr	r3, [pc, #132]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 8000444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000446:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CALLBACK[12](); }
 8000448:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000450:	2b00      	cmp	r3, #0
 8000452:	d008      	beq.n	8000466 <EXTI15_10_IRQHandler+0x5e>
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a1a      	ldr	r2, [pc, #104]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 800045a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800045e:	6153      	str	r3, [r2, #20]
 8000460:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CALLBACK[13](); }
 8000466:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800046e:	2b00      	cmp	r3, #0
 8000470:	d008      	beq.n	8000484 <EXTI15_10_IRQHandler+0x7c>
 8000472:	4b14      	ldr	r3, [pc, #80]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a13      	ldr	r2, [pc, #76]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000478:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 8000480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000482:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CALLBACK[14](); }
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d008      	beq.n	80004a2 <EXTI15_10_IRQHandler+0x9a>
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 8000496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800049a:	6153      	str	r3, [r2, #20]
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 800049e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004a0:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CALLBACK[15](); }
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d008      	beq.n	80004c0 <EXTI15_10_IRQHandler+0xb8>
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <EXTI15_10_IRQHandler+0xbc>)
 80004b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b03      	ldr	r3, [pc, #12]	; (80004c8 <EXTI15_10_IRQHandler+0xc0>)
 80004bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004be:	4798      	blx	r3

}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40010400 	.word	0x40010400
 80004c8:	2000002c 	.word	0x2000002c

080004cc <SPI1_IRQHandler>:
 *                         IRQ
 * ===========================================================
 */

void SPI1_IRQHandler (void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 80004d2:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <SPI1_IRQHandler+0x18>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	7938      	ldrb	r0, [r7, #4]
 80004da:	4798      	blx	r3

}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000020 	.word	0x20000020

080004e8 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 80004ee:	4b04      	ldr	r3, [pc, #16]	; (8000500 <SPI2_IRQHandler+0x18>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	7938      	ldrb	r0, [r7, #4]
 80004f6:	4798      	blx	r3
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000020 	.word	0x20000020

08000504 <USART1_IRQHandler>:
                itr++;
            }
}
//ISR
void USART1_IRQHandler(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000508:	4b02      	ldr	r3, [pc, #8]	; (8000514 <USART1_IRQHandler+0x10>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	691b      	ldr	r3, [r3, #16]
 800050e:	4798      	blx	r3
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000028 	.word	0x20000028

08000518 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 800051c:	4b02      	ldr	r3, [pc, #8]	; (8000528 <USART2_IRQHandler+0x10>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	691b      	ldr	r3, [r3, #16]
 8000522:	4798      	blx	r3
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000028 	.word	0x20000028

0800052c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000530:	4b02      	ldr	r3, [pc, #8]	; (800053c <USART3_IRQHandler+0x10>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	691b      	ldr	r3, [r3, #16]
 8000536:	4798      	blx	r3
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000028 	.word	0x20000028

08000540 <__libc_init_array>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2500      	movs	r5, #0
 8000544:	4e0c      	ldr	r6, [pc, #48]	; (8000578 <__libc_init_array+0x38>)
 8000546:	4c0d      	ldr	r4, [pc, #52]	; (800057c <__libc_init_array+0x3c>)
 8000548:	1ba4      	subs	r4, r4, r6
 800054a:	10a4      	asrs	r4, r4, #2
 800054c:	42a5      	cmp	r5, r4
 800054e:	d109      	bne.n	8000564 <__libc_init_array+0x24>
 8000550:	f000 f81a 	bl	8000588 <_init>
 8000554:	2500      	movs	r5, #0
 8000556:	4e0a      	ldr	r6, [pc, #40]	; (8000580 <__libc_init_array+0x40>)
 8000558:	4c0a      	ldr	r4, [pc, #40]	; (8000584 <__libc_init_array+0x44>)
 800055a:	1ba4      	subs	r4, r4, r6
 800055c:	10a4      	asrs	r4, r4, #2
 800055e:	42a5      	cmp	r5, r4
 8000560:	d105      	bne.n	800056e <__libc_init_array+0x2e>
 8000562:	bd70      	pop	{r4, r5, r6, pc}
 8000564:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000568:	4798      	blx	r3
 800056a:	3501      	adds	r5, #1
 800056c:	e7ee      	b.n	800054c <__libc_init_array+0xc>
 800056e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000572:	4798      	blx	r3
 8000574:	3501      	adds	r5, #1
 8000576:	e7f2      	b.n	800055e <__libc_init_array+0x1e>
 8000578:	080005a0 	.word	0x080005a0
 800057c:	080005a0 	.word	0x080005a0
 8000580:	080005a0 	.word	0x080005a0
 8000584:	080005a4 	.word	0x080005a4

08000588 <_init>:
 8000588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058a:	bf00      	nop
 800058c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058e:	bc08      	pop	{r3}
 8000590:	469e      	mov	lr, r3
 8000592:	4770      	bx	lr

08000594 <_fini>:
 8000594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000596:	bf00      	nop
 8000598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059a:	bc08      	pop	{r3}
 800059c:	469e      	mov	lr, r3
 800059e:	4770      	bx	lr
