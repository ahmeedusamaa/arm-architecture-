
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009bc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000aec  08000aec  00010aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000af8  08000af8  00010b00  2**0
                  CONTENTS
  4 .ARM          00000000  08000af8  08000af8  00010b00  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000af8  08000b00  00010b00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000af8  08000af8  00010af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000afc  08000afc  00010afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000b00  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000b00  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b00  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004474  00000000  00000000  00010b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a39  00000000  00000000  00014f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d0c  00000000  00000000  000159d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000200  00000000  00000000  000166e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001a8  00000000  00000000  000168e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000e29  00000000  00000000  00016a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000021df  00000000  00000000  000178b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c562  00000000  00000000  00019a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00025ffa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006a0  00000000  00000000  00026078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ad4 	.word	0x08000ad4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ad4 	.word	0x08000ad4

08000170 <clock_init>:
#include "TIM.h"

uint32_t IRQ_flag = 0;

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable port A clock
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//Enable port B clock
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	//Enable AFIO clock
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <IRQ_EXTI9_callback>:

void IRQ_EXTI9_callback(void){
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	IRQ_flag = 1;
 80001a8:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <IRQ_EXTI9_callback+0x14>)
 80001aa:	2201      	movs	r2, #1
 80001ac:	601a      	str	r2, [r3, #0]
}
 80001ae:	bf00      	nop
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	2000001c 	.word	0x2000001c

080001bc <SWITCH_CPU_AccessLevel>:
	privileged,
	unprivileged
};

void SWITCH_CPU_AccessLevel(enum CPU_AccessLevel Level)
{
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	71fb      	strb	r3, [r7, #7]
	switch(Level)
 80001c6:	79fb      	ldrb	r3, [r7, #7]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d002      	beq.n	80001d2 <SWITCH_CPU_AccessLevel+0x16>
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d009      	beq.n	80001e4 <SWITCH_CPU_AccessLevel+0x28>
		__asm("mrs  r3, CONTROL    \n\t"
			  "orr   r3,r3,#0x1   \n\t"
			  "msr  CONTROL, r3");
		break;
	}
}
 80001d0:	e00f      	b.n	80001f2 <SWITCH_CPU_AccessLevel+0x36>
		__asm("mrs  r3, CONTROL     \n\t"
 80001d2:	f3ef 8314 	mrs	r3, CONTROL
 80001d6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80001da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80001de:	f383 8814 	msr	CONTROL, r3
		break;
 80001e2:	e006      	b.n	80001f2 <SWITCH_CPU_AccessLevel+0x36>
		__asm("mrs  r3, CONTROL    \n\t"
 80001e4:	f3ef 8314 	mrs	r3, CONTROL
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	f383 8814 	msr	CONTROL, r3
		break;
 80001f0:	bf00      	nop
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr

080001fc <main>:

int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0
	clock_init();
 8000202:	f7ff ffb5 	bl	8000170 <clock_init>
	EXTI_PinConfig_t EXTI_cfg;
	EXTI_cfg.EXTI_PIN = EXTI9PB9;
 8000206:	4a10      	ldr	r2, [pc, #64]	; (8000248 <main+0x4c>)
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	ca07      	ldmia	r2, {r0, r1, r2}
 800020c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_cfg.Trigger_Case = EXTI_Trigger_RISING;
 8000210:	2300      	movs	r3, #0
 8000212:	743b      	strb	r3, [r7, #16]
	EXTI_cfg.P_IRQ_CALLBACK = IRQ_EXTI9_callback;
 8000214:	4b0d      	ldr	r3, [pc, #52]	; (800024c <main+0x50>)
 8000216:	617b      	str	r3, [r7, #20]
	EXTI_cfg.IRQ_EN = EXTI_IRQ_Enable;
 8000218:	2301      	movs	r3, #1
 800021a:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&EXTI_cfg);
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f9fc 	bl	800061c <MCAL_EXTI_GPIO_Init>
	IRQ_flag = 1;
 8000224:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <main+0x54>)
 8000226:	2201      	movs	r2, #1
 8000228:	601a      	str	r2, [r3, #0]

	SWITCH_CPU_AccessLevel(unprivileged);
 800022a:	2001      	movs	r0, #1
 800022c:	f7ff ffc6 	bl	80001bc <SWITCH_CPU_AccessLevel>
	SWITCH_CPU_AccessLevel(privileged);
 8000230:	2000      	movs	r0, #0
 8000232:	f7ff ffc3 	bl	80001bc <SWITCH_CPU_AccessLevel>


	while(1){
		if(IRQ_flag){
 8000236:	4b06      	ldr	r3, [pc, #24]	; (8000250 <main+0x54>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d0fb      	beq.n	8000236 <main+0x3a>
			IRQ_flag = 0;
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <main+0x54>)
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
		if(IRQ_flag){
 8000244:	e7f7      	b.n	8000236 <main+0x3a>
 8000246:	bf00      	nop
 8000248:	08000aec 	.word	0x08000aec
 800024c:	080001a5 	.word	0x080001a5
 8000250:	2000001c 	.word	0x2000001c

08000254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000254:	480d      	ldr	r0, [pc, #52]	; (800028c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000256:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000258:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800025c:	480c      	ldr	r0, [pc, #48]	; (8000290 <LoopForever+0x6>)
  ldr r1, =_edata
 800025e:	490d      	ldr	r1, [pc, #52]	; (8000294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000260:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <LoopForever+0xe>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800026c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000274:	4c0a      	ldr	r4, [pc, #40]	; (80002a0 <LoopForever+0x16>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000282:	f000 fc03 	bl	8000a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000286:	f7ff ffb9 	bl	80001fc <main>

0800028a <LoopForever>:

LoopForever:
    b LoopForever
 800028a:	e7fe      	b.n	800028a <LoopForever>
  ldr   r0, =_estack
 800028c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000294:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000298:	08000b00 	.word	0x08000b00
  ldr r2, =_sbss
 800029c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a0:	20000068 	.word	0x20000068

080002a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a4:	e7fe      	b.n	80002a4 <ADC1_2_IRQHandler>
	...

080002a8 <Enable_NVIC>:
*                          Generic functions
*================================================================
*/

void Enable_NVIC (uint16_t EXTI_Line)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	80fb      	strh	r3, [r7, #6]
	switch (EXTI_Line)
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	2b0f      	cmp	r3, #15
 80002b6:	d854      	bhi.n	8000362 <Enable_NVIC+0xba>
 80002b8:	a201      	add	r2, pc, #4	; (adr r2, 80002c0 <Enable_NVIC+0x18>)
 80002ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002be:	bf00      	nop
 80002c0:	08000301 	.word	0x08000301
 80002c4:	0800030f 	.word	0x0800030f
 80002c8:	0800031d 	.word	0x0800031d
 80002cc:	0800032b 	.word	0x0800032b
 80002d0:	08000339 	.word	0x08000339
 80002d4:	08000347 	.word	0x08000347
 80002d8:	08000347 	.word	0x08000347
 80002dc:	08000347 	.word	0x08000347
 80002e0:	08000347 	.word	0x08000347
 80002e4:	08000347 	.word	0x08000347
 80002e8:	08000355 	.word	0x08000355
 80002ec:	08000355 	.word	0x08000355
 80002f0:	08000355 	.word	0x08000355
 80002f4:	08000355 	.word	0x08000355
 80002f8:	08000355 	.word	0x08000355
 80002fc:	08000355 	.word	0x08000355
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000300:	4b1a      	ldr	r3, [pc, #104]	; (800036c <Enable_NVIC+0xc4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a19      	ldr	r2, [pc, #100]	; (800036c <Enable_NVIC+0xc4>)
 8000306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800030a:	6013      	str	r3, [r2, #0]
		break;
 800030c:	e029      	b.n	8000362 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <Enable_NVIC+0xc4>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a16      	ldr	r2, [pc, #88]	; (800036c <Enable_NVIC+0xc4>)
 8000314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000318:	6013      	str	r3, [r2, #0]
		break;
 800031a:	e022      	b.n	8000362 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <Enable_NVIC+0xc4>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a12      	ldr	r2, [pc, #72]	; (800036c <Enable_NVIC+0xc4>)
 8000322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000326:	6013      	str	r3, [r2, #0]
		break;
 8000328:	e01b      	b.n	8000362 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 800032a:	4b10      	ldr	r3, [pc, #64]	; (800036c <Enable_NVIC+0xc4>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a0f      	ldr	r2, [pc, #60]	; (800036c <Enable_NVIC+0xc4>)
 8000330:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000334:	6013      	str	r3, [r2, #0]
		break;
 8000336:	e014      	b.n	8000362 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <Enable_NVIC+0xc4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a0b      	ldr	r2, [pc, #44]	; (800036c <Enable_NVIC+0xc4>)
 800033e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000342:	6013      	str	r3, [r2, #0]
		break;
 8000344:	e00d      	b.n	8000362 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI9_5_Enable;
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <Enable_NVIC+0xc4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a08      	ldr	r2, [pc, #32]	; (800036c <Enable_NVIC+0xc4>)
 800034c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000350:	6013      	str	r3, [r2, #0]
		break;
 8000352:	e006      	b.n	8000362 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI15_10_Enable;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <Enable_NVIC+0xc8>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a05      	ldr	r2, [pc, #20]	; (8000370 <Enable_NVIC+0xc8>)
 800035a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800035e:	6013      	str	r3, [r2, #0]
		break;
 8000360:	bf00      	nop
	}
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	e000e100 	.word	0xe000e100
 8000370:	e000e104 	.word	0xe000e104

08000374 <Disable_NVIC>:

void Disable_NVIC (uint16_t EXTI_Line)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	80fb      	strh	r3, [r7, #6]
	switch (EXTI_Line)
 800037e:	88fb      	ldrh	r3, [r7, #6]
 8000380:	2b0f      	cmp	r3, #15
 8000382:	d854      	bhi.n	800042e <Disable_NVIC+0xba>
 8000384:	a201      	add	r2, pc, #4	; (adr r2, 800038c <Disable_NVIC+0x18>)
 8000386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800038a:	bf00      	nop
 800038c:	080003cd 	.word	0x080003cd
 8000390:	080003db 	.word	0x080003db
 8000394:	080003e9 	.word	0x080003e9
 8000398:	080003f7 	.word	0x080003f7
 800039c:	08000405 	.word	0x08000405
 80003a0:	08000413 	.word	0x08000413
 80003a4:	08000413 	.word	0x08000413
 80003a8:	08000413 	.word	0x08000413
 80003ac:	08000413 	.word	0x08000413
 80003b0:	08000413 	.word	0x08000413
 80003b4:	08000421 	.word	0x08000421
 80003b8:	08000421 	.word	0x08000421
 80003bc:	08000421 	.word	0x08000421
 80003c0:	08000421 	.word	0x08000421
 80003c4:	08000421 	.word	0x08000421
 80003c8:	08000421 	.word	0x08000421
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 80003cc:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <Disable_NVIC+0xc4>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a19      	ldr	r2, [pc, #100]	; (8000438 <Disable_NVIC+0xc4>)
 80003d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d6:	6013      	str	r3, [r2, #0]
		break;
 80003d8:	e029      	b.n	800042e <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <Disable_NVIC+0xc4>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a16      	ldr	r2, [pc, #88]	; (8000438 <Disable_NVIC+0xc4>)
 80003e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e4:	6013      	str	r3, [r2, #0]
		break;
 80003e6:	e022      	b.n	800042e <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 80003e8:	4b13      	ldr	r3, [pc, #76]	; (8000438 <Disable_NVIC+0xc4>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a12      	ldr	r2, [pc, #72]	; (8000438 <Disable_NVIC+0xc4>)
 80003ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f2:	6013      	str	r3, [r2, #0]
		break;
 80003f4:	e01b      	b.n	800042e <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <Disable_NVIC+0xc4>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a0f      	ldr	r2, [pc, #60]	; (8000438 <Disable_NVIC+0xc4>)
 80003fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000400:	6013      	str	r3, [r2, #0]
		break;
 8000402:	e014      	b.n	800042e <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 8000404:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <Disable_NVIC+0xc4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a0b      	ldr	r2, [pc, #44]	; (8000438 <Disable_NVIC+0xc4>)
 800040a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800040e:	6013      	str	r3, [r2, #0]
		break;
 8000410:	e00d      	b.n	800042e <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI9_5_Enable;
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <Disable_NVIC+0xc8>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a09      	ldr	r2, [pc, #36]	; (800043c <Disable_NVIC+0xc8>)
 8000418:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800041c:	6013      	str	r3, [r2, #0]
		break;
 800041e:	e006      	b.n	800042e <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <Disable_NVIC+0xcc>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a06      	ldr	r2, [pc, #24]	; (8000440 <Disable_NVIC+0xcc>)
 8000426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800042a:	6013      	str	r3, [r2, #0]
		break;
 800042c:	bf00      	nop
	}
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	e000e180 	.word	0xe000e180
 800043c:	e000e100 	.word	0xe000e100
 8000440:	e000e184 	.word	0xe000e184

08000444 <Update_EXTI>:


void Update_EXTI(EXTI_PinConfig_t *EXTI_Config)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    //	configure GPIO pin to be AF Input -> floating input
	GPIO_PConfig_t pinCfg;
	pinCfg.GPIO_PinNumber=EXTI_Config->EXTI_PIN.GPIO_PIN;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	891b      	ldrh	r3, [r3, #8]
 8000450:	813b      	strh	r3, [r7, #8]
	pinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8000452:	2301      	movs	r3, #1
 8000454:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &pinCfg);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f107 0208 	add.w	r2, r7, #8
 800045e:	4611      	mov	r1, r2
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fa5a 	bl	800091a <MCAL_GPIO_Init>

	//update AFIO to Route between EXTI line with PORT A,B,C,D
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	881b      	ldrh	r3, [r3, #0]
 800046a:	089b      	lsrs	r3, r3, #2
 800046c:	b29b      	uxth	r3, r3
 800046e:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position= (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) *4;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	881b      	ldrh	r3, [r3, #0]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	f003 0303 	and.w	r3, r3, #3
 800047a:	b2db      	uxtb	r3, r3
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	73bb      	strb	r3, [r7, #14]
	//clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~ (0xF <<AFIO_EXTICR_position);
 8000480:	4a5f      	ldr	r2, [pc, #380]	; (8000600 <Update_EXTI+0x1bc>)
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	3302      	adds	r3, #2
 8000486:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048a:	7bbb      	ldrb	r3, [r7, #14]
 800048c:	210f      	movs	r1, #15
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	43db      	mvns	r3, r3
 8000494:	4618      	mov	r0, r3
 8000496:	495a      	ldr	r1, [pc, #360]	; (8000600 <Update_EXTI+0x1bc>)
 8000498:	7bfb      	ldrb	r3, [r7, #15]
 800049a:	4002      	ands	r2, r0
 800049c:	3302      	adds	r3, #2
 800049e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |=  ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) &0xF) <<AFIO_EXTICR_position);
 80004a2:	4a57      	ldr	r2, [pc, #348]	; (8000600 <Update_EXTI+0x1bc>)
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	3302      	adds	r3, #2
 80004a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	4954      	ldr	r1, [pc, #336]	; (8000604 <Update_EXTI+0x1c0>)
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d016      	beq.n	80004e4 <Update_EXTI+0xa0>
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	4953      	ldr	r1, [pc, #332]	; (8000608 <Update_EXTI+0x1c4>)
 80004bc:	428b      	cmp	r3, r1
 80004be:	d00f      	beq.n	80004e0 <Update_EXTI+0x9c>
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	4951      	ldr	r1, [pc, #324]	; (800060c <Update_EXTI+0x1c8>)
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d008      	beq.n	80004dc <Update_EXTI+0x98>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	4950      	ldr	r1, [pc, #320]	; (8000610 <Update_EXTI+0x1cc>)
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d101      	bne.n	80004d8 <Update_EXTI+0x94>
 80004d4:	2303      	movs	r3, #3
 80004d6:	e006      	b.n	80004e6 <Update_EXTI+0xa2>
 80004d8:	2300      	movs	r3, #0
 80004da:	e004      	b.n	80004e6 <Update_EXTI+0xa2>
 80004dc:	2302      	movs	r3, #2
 80004de:	e002      	b.n	80004e6 <Update_EXTI+0xa2>
 80004e0:	2301      	movs	r3, #1
 80004e2:	e000      	b.n	80004e6 <Update_EXTI+0xa2>
 80004e4:	2300      	movs	r3, #0
 80004e6:	7bb9      	ldrb	r1, [r7, #14]
 80004e8:	408b      	lsls	r3, r1
 80004ea:	4618      	mov	r0, r3
 80004ec:	4944      	ldr	r1, [pc, #272]	; (8000600 <Update_EXTI+0x1bc>)
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	4302      	orrs	r2, r0
 80004f2:	3302      	adds	r3, #2
 80004f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Update Rising or falling Register
	//clear
	EXTI->RTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80004f8:	4b46      	ldr	r3, [pc, #280]	; (8000614 <Update_EXTI+0x1d0>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	8812      	ldrh	r2, [r2, #0]
 8000500:	4611      	mov	r1, r2
 8000502:	2201      	movs	r2, #1
 8000504:	408a      	lsls	r2, r1
 8000506:	43d2      	mvns	r2, r2
 8000508:	4611      	mov	r1, r2
 800050a:	4a42      	ldr	r2, [pc, #264]	; (8000614 <Update_EXTI+0x1d0>)
 800050c:	400b      	ands	r3, r1
 800050e:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000510:	4b40      	ldr	r3, [pc, #256]	; (8000614 <Update_EXTI+0x1d0>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	8812      	ldrh	r2, [r2, #0]
 8000518:	4611      	mov	r1, r2
 800051a:	2201      	movs	r2, #1
 800051c:	408a      	lsls	r2, r1
 800051e:	43d2      	mvns	r2, r2
 8000520:	4611      	mov	r1, r2
 8000522:	4a3c      	ldr	r2, [pc, #240]	; (8000614 <Update_EXTI+0x1d0>)
 8000524:	400b      	ands	r3, r1
 8000526:	60d3      	str	r3, [r2, #12]
	if(EXTI_Config->Trigger_Case==EXTI_Trigger_RISING)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	7b1b      	ldrb	r3, [r3, #12]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10b      	bne.n	8000548 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000530:	4b38      	ldr	r3, [pc, #224]	; (8000614 <Update_EXTI+0x1d0>)
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	8812      	ldrh	r2, [r2, #0]
 8000538:	4611      	mov	r1, r2
 800053a:	2201      	movs	r2, #1
 800053c:	408a      	lsls	r2, r1
 800053e:	4611      	mov	r1, r2
 8000540:	4a34      	ldr	r2, [pc, #208]	; (8000614 <Update_EXTI+0x1d0>)
 8000542:	430b      	orrs	r3, r1
 8000544:	6093      	str	r3, [r2, #8]
 8000546:	e029      	b.n	800059c <Update_EXTI+0x158>

	}
	else if (EXTI_Config->Trigger_Case==EXTI_Trigger_FALLING)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	7b1b      	ldrb	r3, [r3, #12]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d10b      	bne.n	8000568 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000550:	4b30      	ldr	r3, [pc, #192]	; (8000614 <Update_EXTI+0x1d0>)
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	8812      	ldrh	r2, [r2, #0]
 8000558:	4611      	mov	r1, r2
 800055a:	2201      	movs	r2, #1
 800055c:	408a      	lsls	r2, r1
 800055e:	4611      	mov	r1, r2
 8000560:	4a2c      	ldr	r2, [pc, #176]	; (8000614 <Update_EXTI+0x1d0>)
 8000562:	430b      	orrs	r3, r1
 8000564:	60d3      	str	r3, [r2, #12]
 8000566:	e019      	b.n	800059c <Update_EXTI+0x158>

	}
	else if (EXTI_Config->Trigger_Case==EXTI_Trigger_RISING_and_FALLING)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	7b1b      	ldrb	r3, [r3, #12]
 800056c:	2b02      	cmp	r3, #2
 800056e:	d115      	bne.n	800059c <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <Update_EXTI+0x1d0>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	8812      	ldrh	r2, [r2, #0]
 8000578:	4611      	mov	r1, r2
 800057a:	2201      	movs	r2, #1
 800057c:	408a      	lsls	r2, r1
 800057e:	4611      	mov	r1, r2
 8000580:	4a24      	ldr	r2, [pc, #144]	; (8000614 <Update_EXTI+0x1d0>)
 8000582:	430b      	orrs	r3, r1
 8000584:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000586:	4b23      	ldr	r3, [pc, #140]	; (8000614 <Update_EXTI+0x1d0>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	8812      	ldrh	r2, [r2, #0]
 800058e:	4611      	mov	r1, r2
 8000590:	2201      	movs	r2, #1
 8000592:	408a      	lsls	r2, r1
 8000594:	4611      	mov	r1, r2
 8000596:	4a1f      	ldr	r2, [pc, #124]	; (8000614 <Update_EXTI+0x1d0>)
 8000598:	430b      	orrs	r3, r1
 800059a:	60d3      	str	r3, [r2, #12]

	}

	//Update IRQ Handling CALLBACK
	GP_IRQ_CALLBACK[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CALLBACK;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	691b      	ldr	r3, [r3, #16]
 80005a6:	4a1c      	ldr	r2, [pc, #112]	; (8000618 <Update_EXTI+0x1d4>)
 80005a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//Enable/Disable IRQ EXTI & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	7b5b      	ldrb	r3, [r3, #13]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d110      	bne.n	80005d6 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <Update_EXTI+0x1d0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	8812      	ldrh	r2, [r2, #0]
 80005bc:	4611      	mov	r1, r2
 80005be:	2201      	movs	r2, #1
 80005c0:	408a      	lsls	r2, r1
 80005c2:	4611      	mov	r1, r2
 80005c4:	4a13      	ldr	r2, [pc, #76]	; (8000614 <Update_EXTI+0x1d0>)
 80005c6:	430b      	orrs	r3, r1
 80005c8:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fe6a 	bl	80002a8 <Enable_NVIC>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);

	}

}
 80005d4:	e010      	b.n	80005f8 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <Update_EXTI+0x1d0>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	8812      	ldrh	r2, [r2, #0]
 80005de:	4611      	mov	r1, r2
 80005e0:	2201      	movs	r2, #1
 80005e2:	408a      	lsls	r2, r1
 80005e4:	43d2      	mvns	r2, r2
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <Update_EXTI+0x1d0>)
 80005ea:	400b      	ands	r3, r1
 80005ec:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff febe 	bl	8000374 <Disable_NVIC>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40010000 	.word	0x40010000
 8000604:	40010800 	.word	0x40010800
 8000608:	40010c00 	.word	0x40010c00
 800060c:	40011000 	.word	0x40011000
 8000610:	40011400 	.word	0x40011400
 8000614:	40010400 	.word	0x40010400
 8000618:	2000002c 	.word	0x2000002c

0800061c <MCAL_EXTI_GPIO_Init>:
* @param [in] 				 -EXTI_Config set by @ref EXTI_define, EXTI_Trigger and EXTI_IRQ_define
* @retval  				     -none
* Note						 -LQFP48 Package has only GPIO A,B,part of C and D
*/
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t * EXTI_Config)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff ff0d 	bl	8000444 <Update_EXTI>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <EXTI0_IRQHandler>:
*================================================================
*                          ISR functions
*================================================================
*/
void EXTI0_IRQHandler (void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<0;
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <EXTI0_IRQHandler+0x1c>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <EXTI0_IRQHandler+0x1c>)
 800063e:	f043 0301 	orr.w	r3, r3, #1
 8000642:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[0]();
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <EXTI0_IRQHandler+0x20>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4798      	blx	r3
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40010400 	.word	0x40010400
 8000654:	2000002c 	.word	0x2000002c

08000658 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<1;
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <EXTI1_IRQHandler+0x1c>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4a04      	ldr	r2, [pc, #16]	; (8000674 <EXTI1_IRQHandler+0x1c>)
 8000662:	f043 0302 	orr.w	r3, r3, #2
 8000666:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[1]();
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <EXTI1_IRQHandler+0x20>)
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	4798      	blx	r3
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40010400 	.word	0x40010400
 8000678:	2000002c 	.word	0x2000002c

0800067c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<2;
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <EXTI2_IRQHandler+0x1c>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <EXTI2_IRQHandler+0x1c>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[2]();
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <EXTI2_IRQHandler+0x20>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4798      	blx	r3
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40010400 	.word	0x40010400
 800069c:	2000002c 	.word	0x2000002c

080006a0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<3;
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <EXTI3_IRQHandler+0x1c>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <EXTI3_IRQHandler+0x1c>)
 80006aa:	f043 0308 	orr.w	r3, r3, #8
 80006ae:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[3]();
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <EXTI3_IRQHandler+0x20>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	4798      	blx	r3
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40010400 	.word	0x40010400
 80006c0:	2000002c 	.word	0x2000002c

080006c4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<4;
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <EXTI4_IRQHandler+0x1c>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <EXTI4_IRQHandler+0x1c>)
 80006ce:	f043 0310 	orr.w	r3, r3, #16
 80006d2:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[4]();
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <EXTI4_IRQHandler+0x20>)
 80006d6:	691b      	ldr	r3, [r3, #16]
 80006d8:	4798      	blx	r3
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40010400 	.word	0x40010400
 80006e4:	2000002c 	.word	0x2000002c

080006e8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CALLBACK[5](); }
 80006ec:	4b26      	ldr	r3, [pc, #152]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	f003 0320 	and.w	r3, r3, #32
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d008      	beq.n	800070a <EXTI9_5_IRQHandler+0x22>
 80006f8:	4b23      	ldr	r3, [pc, #140]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	4a22      	ldr	r2, [pc, #136]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 80006fe:	f043 0320 	orr.w	r3, r3, #32
 8000702:	6153      	str	r3, [r2, #20]
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <EXTI9_5_IRQHandler+0xa4>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CALLBACK[6](); }
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000712:	2b00      	cmp	r3, #0
 8000714:	d008      	beq.n	8000728 <EXTI9_5_IRQHandler+0x40>
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000720:	6153      	str	r3, [r2, #20]
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <EXTI9_5_IRQHandler+0xa4>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CALLBACK[7](); }
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000730:	2b00      	cmp	r3, #0
 8000732:	d008      	beq.n	8000746 <EXTI9_5_IRQHandler+0x5e>
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	4a13      	ldr	r2, [pc, #76]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 800073a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073e:	6153      	str	r3, [r2, #20]
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <EXTI9_5_IRQHandler+0xa4>)
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CALLBACK[8](); }
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800074e:	2b00      	cmp	r3, #0
 8000750:	d008      	beq.n	8000764 <EXTI9_5_IRQHandler+0x7c>
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <EXTI9_5_IRQHandler+0xa4>)
 8000760:	6a1b      	ldr	r3, [r3, #32]
 8000762:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CALLBACK[9](); }
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800076c:	2b00      	cmp	r3, #0
 800076e:	d008      	beq.n	8000782 <EXTI9_5_IRQHandler+0x9a>
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <EXTI9_5_IRQHandler+0xa0>)
 8000776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800077a:	6153      	str	r3, [r2, #20]
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <EXTI9_5_IRQHandler+0xa4>)
 800077e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000780:	4798      	blx	r3

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40010400 	.word	0x40010400
 800078c:	2000002c 	.word	0x2000002c

08000790 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CALLBACK[10](); }
 8000794:	4b2d      	ldr	r3, [pc, #180]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800079c:	2b00      	cmp	r3, #0
 800079e:	d008      	beq.n	80007b2 <EXTI15_10_IRQHandler+0x22>
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	4a29      	ldr	r2, [pc, #164]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007aa:	6153      	str	r3, [r2, #20]
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <EXTI15_10_IRQHandler+0xc0>)
 80007ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b0:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CALLBACK[11](); }
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d008      	beq.n	80007d0 <EXTI15_10_IRQHandler+0x40>
 80007be:	4b23      	ldr	r3, [pc, #140]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a22      	ldr	r2, [pc, #136]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007c8:	6153      	str	r3, [r2, #20]
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <EXTI15_10_IRQHandler+0xc0>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ce:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CALLBACK[12](); }
 80007d0:	4b1e      	ldr	r3, [pc, #120]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d008      	beq.n	80007ee <EXTI15_10_IRQHandler+0x5e>
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	4a1a      	ldr	r2, [pc, #104]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007e6:	6153      	str	r3, [r2, #20]
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <EXTI15_10_IRQHandler+0xc0>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ec:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CALLBACK[13](); }
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d008      	beq.n	800080c <EXTI15_10_IRQHandler+0x7c>
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	4a13      	ldr	r2, [pc, #76]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 8000800:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000804:	6153      	str	r3, [r2, #20]
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <EXTI15_10_IRQHandler+0xc0>)
 8000808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080a:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CALLBACK[14](); }
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000814:	2b00      	cmp	r3, #0
 8000816:	d008      	beq.n	800082a <EXTI15_10_IRQHandler+0x9a>
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	4a0b      	ldr	r2, [pc, #44]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000822:	6153      	str	r3, [r2, #20]
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <EXTI15_10_IRQHandler+0xc0>)
 8000826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000828:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CALLBACK[15](); }
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d008      	beq.n	8000848 <EXTI15_10_IRQHandler+0xb8>
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	4a04      	ldr	r2, [pc, #16]	; (800084c <EXTI15_10_IRQHandler+0xbc>)
 800083c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000840:	6153      	str	r3, [r2, #20]
 8000842:	4b03      	ldr	r3, [pc, #12]	; (8000850 <EXTI15_10_IRQHandler+0xc0>)
 8000844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000846:	4798      	blx	r3

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40010400 	.word	0x40010400
 8000850:	2000002c 	.word	0x2000002c

08000854 <Get_CRLH_Position>:
 *      Author: ahmed osama
 */
#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	2b80      	cmp	r3, #128	; 0x80
 8000862:	d042      	beq.n	80008ea <Get_CRLH_Position+0x96>
 8000864:	2b80      	cmp	r3, #128	; 0x80
 8000866:	dc11      	bgt.n	800088c <Get_CRLH_Position+0x38>
 8000868:	2b08      	cmp	r3, #8
 800086a:	d036      	beq.n	80008da <Get_CRLH_Position+0x86>
 800086c:	2b08      	cmp	r3, #8
 800086e:	dc06      	bgt.n	800087e <Get_CRLH_Position+0x2a>
 8000870:	2b02      	cmp	r3, #2
 8000872:	d02e      	beq.n	80008d2 <Get_CRLH_Position+0x7e>
 8000874:	2b04      	cmp	r3, #4
 8000876:	d02e      	beq.n	80008d6 <Get_CRLH_Position+0x82>
 8000878:	2b01      	cmp	r3, #1
 800087a:	d028      	beq.n	80008ce <Get_CRLH_Position+0x7a>
 800087c:	e047      	b.n	800090e <Get_CRLH_Position+0xba>
 800087e:	2b20      	cmp	r3, #32
 8000880:	d02f      	beq.n	80008e2 <Get_CRLH_Position+0x8e>
 8000882:	2b40      	cmp	r3, #64	; 0x40
 8000884:	d02f      	beq.n	80008e6 <Get_CRLH_Position+0x92>
 8000886:	2b10      	cmp	r3, #16
 8000888:	d029      	beq.n	80008de <Get_CRLH_Position+0x8a>
 800088a:	e040      	b.n	800090e <Get_CRLH_Position+0xba>
 800088c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000890:	d033      	beq.n	80008fa <Get_CRLH_Position+0xa6>
 8000892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000896:	dc09      	bgt.n	80008ac <Get_CRLH_Position+0x58>
 8000898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800089c:	d029      	beq.n	80008f2 <Get_CRLH_Position+0x9e>
 800089e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008a2:	d028      	beq.n	80008f6 <Get_CRLH_Position+0xa2>
 80008a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008a8:	d021      	beq.n	80008ee <Get_CRLH_Position+0x9a>
 80008aa:	e030      	b.n	800090e <Get_CRLH_Position+0xba>
 80008ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b0:	d027      	beq.n	8000902 <Get_CRLH_Position+0xae>
 80008b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b6:	dc03      	bgt.n	80008c0 <Get_CRLH_Position+0x6c>
 80008b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008bc:	d01f      	beq.n	80008fe <Get_CRLH_Position+0xaa>
 80008be:	e026      	b.n	800090e <Get_CRLH_Position+0xba>
 80008c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008c4:	d01f      	beq.n	8000906 <Get_CRLH_Position+0xb2>
 80008c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008ca:	d01e      	beq.n	800090a <Get_CRLH_Position+0xb6>
 80008cc:	e01f      	b.n	800090e <Get_CRLH_Position+0xba>
	{
		case GPIO_PIN_0 : return 0;  break;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e01e      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_1 : return 4;  break;
 80008d2:	2304      	movs	r3, #4
 80008d4:	e01c      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_2 : return 8;  break;
 80008d6:	2308      	movs	r3, #8
 80008d8:	e01a      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_3 : return 12; break;
 80008da:	230c      	movs	r3, #12
 80008dc:	e018      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_4 : return 16; break;
 80008de:	2310      	movs	r3, #16
 80008e0:	e016      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_5 : return 20; break;
 80008e2:	2314      	movs	r3, #20
 80008e4:	e014      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_6 : return 24; break;
 80008e6:	2318      	movs	r3, #24
 80008e8:	e012      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_7 : return 28; break;
 80008ea:	231c      	movs	r3, #28
 80008ec:	e010      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_8 : return 0;  break;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e00e      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_9 : return 4;  break;
 80008f2:	2304      	movs	r3, #4
 80008f4:	e00c      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_10: return 8;  break;
 80008f6:	2308      	movs	r3, #8
 80008f8:	e00a      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_11: return 12; break;
 80008fa:	230c      	movs	r3, #12
 80008fc:	e008      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_12: return 16; break;
 80008fe:	2310      	movs	r3, #16
 8000900:	e006      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_13: return 20; break;
 8000902:	2314      	movs	r3, #20
 8000904:	e004      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_14: return 24; break;
 8000906:	2318      	movs	r3, #24
 8000908:	e002      	b.n	8000910 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_15: return 28; break;
 800090a:	231c      	movs	r3, #28
 800090c:	e000      	b.n	8000910 <Get_CRLH_Position+0xbc>
	}
	return 0;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr

0800091a <MCAL_GPIO_Init>:

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PConfig_t* PinConfig)
{
 800091a:	b590      	push	{r4, r7, lr}
 800091c:	b085      	sub	sp, #20
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	6039      	str	r1, [r7, #0]
	uint8_t PIN_Config=0;
 8000924:	2300      	movs	r3, #0
 8000926:	73fb      	strb	r3, [r7, #15]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 to 7
	//Port configuration register high (GPIOx_CRH) Configure PINS from 8 to 15
	volatile uint32_t* Config_Register=NULL;
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
	Config_Register= (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	2bff      	cmp	r3, #255	; 0xff
 8000932:	d801      	bhi.n	8000938 <MCAL_GPIO_Init+0x1e>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	e001      	b.n	800093c <MCAL_GPIO_Init+0x22>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3304      	adds	r3, #4
 800093c:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] MODE[0:0]
	*(Config_Register) &= ~ (0xf<< Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ff86 	bl	8000854 <Get_CRLH_Position>
 8000948:	4603      	mov	r3, r0
 800094a:	461a      	mov	r2, r3
 800094c:	230f      	movs	r3, #15
 800094e:	4093      	lsls	r3, r2
 8000950:	43da      	mvns	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	401a      	ands	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	601a      	str	r2, [r3, #0]

	//if pin is output
	if(PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_PP || PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_OD ||  PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_PP || PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_OD  )
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	2b04      	cmp	r3, #4
 8000962:	d00b      	beq.n	800097c <MCAL_GPIO_Init+0x62>
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	789b      	ldrb	r3, [r3, #2]
 8000968:	2b05      	cmp	r3, #5
 800096a:	d007      	beq.n	800097c <MCAL_GPIO_Init+0x62>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	2b06      	cmp	r3, #6
 8000972:	d003      	beq.n	800097c <MCAL_GPIO_Init+0x62>
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	789b      	ldrb	r3, [r3, #2]
 8000978:	2b07      	cmp	r3, #7
 800097a:	d10e      	bne.n	800099a <MCAL_GPIO_Init+0x80>
	{
		//set CNF[1:0] MODE[1:0]
		PIN_Config =( (((PinConfig->GPIO_MODE - 4) << 2 )| (PinConfig->GPIO_Output_SPeed)) & 0x0F);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	789b      	ldrb	r3, [r3, #2]
 8000980:	3b04      	subs	r3, #4
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	b25a      	sxtb	r2, r3
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	78db      	ldrb	r3, [r3, #3]
 800098a:	b25b      	sxtb	r3, r3
 800098c:	4313      	orrs	r3, r2
 800098e:	b25b      	sxtb	r3, r3
 8000990:	b2db      	uxtb	r3, r3
 8000992:	f003 030f 	and.w	r3, r3, #15
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	e02c      	b.n	80009f4 <MCAL_GPIO_Init+0xda>
	}

	//if pin is input
	else //MODE = 00: Input mode (reset state)
	{
		if(PinConfig->GPIO_MODE==GPIO_MODE_Analog || PinConfig->GPIO_MODE==GPIO_MODE_INPUT_FLO)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	789b      	ldrb	r3, [r3, #2]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d003      	beq.n	80009aa <MCAL_GPIO_Init+0x90>
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	789b      	ldrb	r3, [r3, #2]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d107      	bne.n	80009ba <MCAL_GPIO_Init+0xa0>
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((PinConfig->GPIO_MODE) << 2 )| 0x0) & 0x0F);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	789b      	ldrb	r3, [r3, #2]
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e01c      	b.n	80009f4 <MCAL_GPIO_Init+0xda>

		}
		else if(PinConfig->GPIO_MODE==GPIO_MODE_INPUT_AF)                   //consider it input floating
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	789b      	ldrb	r3, [r3, #2]
 80009be:	2b08      	cmp	r3, #8
 80009c0:	d102      	bne.n	80009c8 <MCAL_GPIO_Init+0xae>
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((GPIO_MODE_INPUT_FLO) << 2 )| (0x0)) & 0x0F);
 80009c2:	2304      	movs	r3, #4
 80009c4:	73fb      	strb	r3, [r7, #15]
 80009c6:	e015      	b.n	80009f4 <MCAL_GPIO_Init+0xda>

		}
		else
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((GPIO_MODE_INPUT_PU) << 2 )| (0x0)) & 0x0F);
 80009c8:	2308      	movs	r3, #8
 80009ca:	73fb      	strb	r3, [r7, #15]
			//PD or PP
			if(PinConfig->GPIO_MODE==GPIO_MODE_INPUT_PU)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	789b      	ldrb	r3, [r3, #2]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d107      	bne.n	80009e4 <MCAL_GPIO_Init+0xca>
			{
				//in Table 20. port bit configuration table set PxODR 1 for input pull_up
				GPIOx->ODR |=  PinConfig->GPIO_PinNumber;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	8812      	ldrh	r2, [r2, #0]
 80009dc:	431a      	orrs	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	e007      	b.n	80009f4 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//in Table 20. port bit configuration table set PxODR 0 for input pull_down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	8812      	ldrh	r2, [r2, #0]
 80009ec:	43d2      	mvns	r2, r2
 80009ee:	401a      	ands	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	*(Config_Register) |= PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber);
 80009f4:	7bfc      	ldrb	r4, [r7, #15]
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ff2a 	bl	8000854 <Get_CRLH_Position>
 8000a00:	4603      	mov	r3, r0
 8000a02:	fa04 f203 	lsl.w	r2, r4, r3
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	601a      	str	r2, [r3, #0]

}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}

08000a18 <SPI1_IRQHandler>:
 *                         IRQ
 * ===========================================================
 */

void SPI1_IRQHandler (void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SPI1_IRQHandler+0x18>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	7938      	ldrb	r0, [r7, #4]
 8000a26:	4798      	blx	r3

}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000020 	.word	0x20000020

08000a34 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SPI2_IRQHandler+0x18>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	7938      	ldrb	r0, [r7, #4]
 8000a42:	4798      	blx	r3
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000020 	.word	0x20000020

08000a50 <USART1_IRQHandler>:
                itr++;
            }
}
//ISR
void USART1_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000a54:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <USART1_IRQHandler+0x10>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	691b      	ldr	r3, [r3, #16]
 8000a5a:	4798      	blx	r3
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000028 	.word	0x20000028

08000a64 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000a68:	4b02      	ldr	r3, [pc, #8]	; (8000a74 <USART2_IRQHandler+0x10>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	691b      	ldr	r3, [r3, #16]
 8000a6e:	4798      	blx	r3
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000028 	.word	0x20000028

08000a78 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000a7c:	4b02      	ldr	r3, [pc, #8]	; (8000a88 <USART3_IRQHandler+0x10>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	691b      	ldr	r3, [r3, #16]
 8000a82:	4798      	blx	r3
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000028 	.word	0x20000028

08000a8c <__libc_init_array>:
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	2500      	movs	r5, #0
 8000a90:	4e0c      	ldr	r6, [pc, #48]	; (8000ac4 <__libc_init_array+0x38>)
 8000a92:	4c0d      	ldr	r4, [pc, #52]	; (8000ac8 <__libc_init_array+0x3c>)
 8000a94:	1ba4      	subs	r4, r4, r6
 8000a96:	10a4      	asrs	r4, r4, #2
 8000a98:	42a5      	cmp	r5, r4
 8000a9a:	d109      	bne.n	8000ab0 <__libc_init_array+0x24>
 8000a9c:	f000 f81a 	bl	8000ad4 <_init>
 8000aa0:	2500      	movs	r5, #0
 8000aa2:	4e0a      	ldr	r6, [pc, #40]	; (8000acc <__libc_init_array+0x40>)
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	; (8000ad0 <__libc_init_array+0x44>)
 8000aa6:	1ba4      	subs	r4, r4, r6
 8000aa8:	10a4      	asrs	r4, r4, #2
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	d105      	bne.n	8000aba <__libc_init_array+0x2e>
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ab4:	4798      	blx	r3
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	e7ee      	b.n	8000a98 <__libc_init_array+0xc>
 8000aba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000abe:	4798      	blx	r3
 8000ac0:	3501      	adds	r5, #1
 8000ac2:	e7f2      	b.n	8000aaa <__libc_init_array+0x1e>
 8000ac4:	08000af8 	.word	0x08000af8
 8000ac8:	08000af8 	.word	0x08000af8
 8000acc:	08000af8 	.word	0x08000af8
 8000ad0:	08000afc 	.word	0x08000afc

08000ad4 <_init>:
 8000ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad6:	bf00      	nop
 8000ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ada:	bc08      	pop	{r3}
 8000adc:	469e      	mov	lr, r3
 8000ade:	4770      	bx	lr

08000ae0 <_fini>:
 8000ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae2:	bf00      	nop
 8000ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ae6:	bc08      	pop	{r3}
 8000ae8:	469e      	mov	lr, r3
 8000aea:	4770      	bx	lr
