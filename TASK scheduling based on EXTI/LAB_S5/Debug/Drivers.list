
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b1c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000c4c  08000c4c  00010c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c58  08000c58  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000c58  08000c58  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c58  08000c58  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c58  08000c58  00010c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c5c  08000c5c  00010c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000004  08000c64  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08000c64  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000045d5  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000aa8  00000000  00000000  00024602  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e1c  00000000  00000000  000250aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000220  00000000  00000000  00025ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c8  00000000  00000000  000260e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000e4d  00000000  00000000  000262b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002243  00000000  00000000  000270fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c76a  00000000  00000000  00029340  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00035aaa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000728  00000000  00000000  00035b28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c34 	.word	0x08000c34

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000c34 	.word	0x08000c34

08000170 <clock_init>:
#define OS_SWITCH_SP_to_MSP __asm volatile ("mrs r0, CONTROL \n\t mov r1, #0x05 \n\t and r0,r0,r1 \n\t msr CONTROL, r0 ")  //set bit 1 in CONTROL register to zero

#define OS_Generate_Exception __asm volatile ("SVC #0x3")

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable port A clock
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//Enable port B clock
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	//Enable AFIO clock
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <IRQ_EXTI9_callback>:

void IRQ_EXTI9_callback(void){
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	if (IRQ_flag == 0)
 80001a8:	4b0c      	ldr	r3, [pc, #48]	; (80001dc <IRQ_EXTI9_callback+0x38>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d106      	bne.n	80001be <IRQ_EXTI9_callback+0x1a>
	{
		TASKA_flag = 1;
 80001b0:	4b0b      	ldr	r3, [pc, #44]	; (80001e0 <IRQ_EXTI9_callback+0x3c>)
 80001b2:	2201      	movs	r2, #1
 80001b4:	601a      	str	r2, [r3, #0]
		IRQ_flag =1;
 80001b6:	4b09      	ldr	r3, [pc, #36]	; (80001dc <IRQ_EXTI9_callback+0x38>)
 80001b8:	2201      	movs	r2, #1
 80001ba:	601a      	str	r2, [r3, #0]
	}else if(IRQ_flag == 1){
		TASKB_flag = 1;
		IRQ_flag = 0;
	}
}
 80001bc:	e009      	b.n	80001d2 <IRQ_EXTI9_callback+0x2e>
	}else if(IRQ_flag == 1){
 80001be:	4b07      	ldr	r3, [pc, #28]	; (80001dc <IRQ_EXTI9_callback+0x38>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d105      	bne.n	80001d2 <IRQ_EXTI9_callback+0x2e>
		TASKB_flag = 1;
 80001c6:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <IRQ_EXTI9_callback+0x40>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	601a      	str	r2, [r3, #0]
		IRQ_flag = 0;
 80001cc:	4b03      	ldr	r3, [pc, #12]	; (80001dc <IRQ_EXTI9_callback+0x38>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000020 	.word	0x20000020
 80001e0:	20000034 	.word	0x20000034
 80001e4:	20000044 	.word	0x20000044

080001e8 <TASKA>:

int TASKA(int a, int b, int c)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	60f8      	str	r0, [r7, #12]
 80001f0:	60b9      	str	r1, [r7, #8]
 80001f2:	607a      	str	r2, [r7, #4]
	return a+b+c;
 80001f4:	68fa      	ldr	r2, [r7, #12]
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	441a      	add	r2, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4413      	add	r3, r2
}
 80001fe:	4618      	mov	r0, r3
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr

08000208 <TASKB>:

int TASKB(int a,int b, int c)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	607a      	str	r2, [r7, #4]
	return a+b+c;
 8000214:	68fa      	ldr	r2, [r7, #12]
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	441a      	add	r2, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	4413      	add	r3, r2
}
 800021e:	4618      	mov	r0, r3
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr

08000228 <SVC_Handler>:
	privileged,
	unprivileged
};

void SVC_Handler()
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	SWITCH_CPU_AccessLevel(privileged);
 800022c:	2000      	movs	r0, #0
 800022e:	f000 f802 	bl	8000236 <SWITCH_CPU_AccessLevel>
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}

08000236 <SWITCH_CPU_AccessLevel>:

void SWITCH_CPU_AccessLevel(enum CPU_AccessLevel Level)
{
 8000236:	b480      	push	{r7}
 8000238:	b083      	sub	sp, #12
 800023a:	af00      	add	r7, sp, #0
 800023c:	4603      	mov	r3, r0
 800023e:	71fb      	strb	r3, [r7, #7]
	switch(Level)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d002      	beq.n	800024c <SWITCH_CPU_AccessLevel+0x16>
 8000246:	2b01      	cmp	r3, #1
 8000248:	d009      	beq.n	800025e <SWITCH_CPU_AccessLevel+0x28>
		__asm("mrs  r3, CONTROL    \n\t"
				"orr   r3,r3,#0x1   \n\t"
				"msr  CONTROL, r3");
		break;
	}
}
 800024a:	e00f      	b.n	800026c <SWITCH_CPU_AccessLevel+0x36>
		__asm("mrs  r3, CONTROL     \n\t"
 800024c:	f3ef 8314 	mrs	r3, CONTROL
 8000250:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8000254:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000258:	f383 8814 	msr	CONTROL, r3
		break;
 800025c:	e006      	b.n	800026c <SWITCH_CPU_AccessLevel+0x36>
		__asm("mrs  r3, CONTROL    \n\t"
 800025e:	f3ef 8314 	mrs	r3, CONTROL
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	f383 8814 	msr	CONTROL, r3
		break;
 800026a:	bf00      	nop
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
	...

08000278 <MainOs>:

void MainOs()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	// 1/2 KiloByte for MSP
	_E_MSP = _S_MSP - 512;
 800027c:	4b30      	ldr	r3, [pc, #192]	; (8000340 <MainOs+0xc8>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000284:	4a2f      	ldr	r2, [pc, #188]	; (8000344 <MainOs+0xcc>)
 8000286:	6013      	str	r3, [r2, #0]

	// 1 Byte for TASKA
	_S_PSP_TA = _E_MSP - 8;
 8000288:	4b2e      	ldr	r3, [pc, #184]	; (8000344 <MainOs+0xcc>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3b08      	subs	r3, #8
 800028e:	4a2e      	ldr	r2, [pc, #184]	; (8000348 <MainOs+0xd0>)
 8000290:	6013      	str	r3, [r2, #0]
	_E_PSP_TA = _S_PSP_TA - TaskA_Stack_Size;
 8000292:	4b2d      	ldr	r3, [pc, #180]	; (8000348 <MainOs+0xd0>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	3b64      	subs	r3, #100	; 0x64
 8000298:	4a2c      	ldr	r2, [pc, #176]	; (800034c <MainOs+0xd4>)
 800029a:	6013      	str	r3, [r2, #0]

	// 1 Byte for TASKB
	_S_PSP_TB = _E_PSP_TA - 8;
 800029c:	4b2b      	ldr	r3, [pc, #172]	; (800034c <MainOs+0xd4>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	3b08      	subs	r3, #8
 80002a2:	4a2b      	ldr	r2, [pc, #172]	; (8000350 <MainOs+0xd8>)
 80002a4:	6013      	str	r3, [r2, #0]
	_E_PSP_TB = _S_PSP_TB - TaskB_Stack_Size;
 80002a6:	4b2a      	ldr	r3, [pc, #168]	; (8000350 <MainOs+0xd8>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	3b64      	subs	r3, #100	; 0x64
 80002ac:	4a29      	ldr	r2, [pc, #164]	; (8000354 <MainOs+0xdc>)
 80002ae:	6013      	str	r3, [r2, #0]

	while(1)
	{
		__asm("NOP");
 80002b0:	bf00      	nop
		if(TASKA_flag == 1){
 80002b2:	4b29      	ldr	r3, [pc, #164]	; (8000358 <MainOs+0xe0>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d122      	bne.n	8000300 <MainOs+0x88>
			//set PSP register to _S_PSP_TA
			OS_SET_PSP(_S_PSP_TA);
 80002ba:	4b23      	ldr	r3, [pc, #140]	; (8000348 <MainOs+0xd0>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4618      	mov	r0, r3
 80002c0:	f380 8809 	msr	PSP, r0
			//set SP -> PSP
			OS_SWITCH_SP_to_PSP ;                //set SP before set access level to unprivileged (before lose access)
 80002c4:	f3ef 8014 	mrs	r0, CONTROL
 80002c8:	f04f 0102 	mov.w	r1, #2
 80002cc:	ea40 0001 	orr.w	r0, r0, r1
 80002d0:	f380 8814 	msr	CONTROL, r0
			//set access level to unprivileged
			SWITCH_CPU_AccessLevel(unprivileged);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f7ff ffae 	bl	8000236 <SWITCH_CPU_AccessLevel>
			TASKA_flag = TASKA(1,2,3);
 80002da:	2203      	movs	r2, #3
 80002dc:	2102      	movs	r1, #2
 80002de:	2001      	movs	r0, #1
 80002e0:	f7ff ff82 	bl	80001e8 <TASKA>
 80002e4:	4603      	mov	r3, r0
 80002e6:	461a      	mov	r2, r3
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MainOs+0xe0>)
 80002ea:	601a      	str	r2, [r3, #0]
			//set access level to privileged
			OS_Generate_Exception;				//set access level to privileged before setting SP -> MSP to have access first
 80002ec:	df03      	svc	3
			//set SP -> MSP
			OS_SWITCH_SP_to_MSP;
 80002ee:	f3ef 8014 	mrs	r0, CONTROL
 80002f2:	f04f 0105 	mov.w	r1, #5
 80002f6:	ea00 0001 	and.w	r0, r0, r1
 80002fa:	f380 8814 	msr	CONTROL, r0
 80002fe:	e7d7      	b.n	80002b0 <MainOs+0x38>

		}else if (TASKB_flag == 1) {
 8000300:	4b16      	ldr	r3, [pc, #88]	; (800035c <MainOs+0xe4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d1d3      	bne.n	80002b0 <MainOs+0x38>
			//set PSP register to _S_PSP_TB
			OS_SET_PSP(_S_PSP_TB);
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <MainOs+0xd8>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4618      	mov	r0, r3
 800030e:	f380 8809 	msr	PSP, r0
			//set SP -> PSP
			//set access level to unprivileged
			SWITCH_CPU_AccessLevel(unprivileged);
 8000312:	2001      	movs	r0, #1
 8000314:	f7ff ff8f 	bl	8000236 <SWITCH_CPU_AccessLevel>
			TASKB_flag = TASKB(1,2,3);
 8000318:	2203      	movs	r2, #3
 800031a:	2102      	movs	r1, #2
 800031c:	2001      	movs	r0, #1
 800031e:	f7ff ff73 	bl	8000208 <TASKB>
 8000322:	4603      	mov	r3, r0
 8000324:	461a      	mov	r2, r3
 8000326:	4b0d      	ldr	r3, [pc, #52]	; (800035c <MainOs+0xe4>)
 8000328:	601a      	str	r2, [r3, #0]
			//set access level to privileged
			OS_Generate_Exception;
 800032a:	df03      	svc	3
			//set SP -> MSP
			OS_SWITCH_SP_to_MSP;
 800032c:	f3ef 8014 	mrs	r0, CONTROL
 8000330:	f04f 0105 	mov.w	r1, #5
 8000334:	ea00 0001 	and.w	r0, r0, r1
 8000338:	f380 8814 	msr	CONTROL, r0
		__asm("NOP");
 800033c:	e7b8      	b.n	80002b0 <MainOs+0x38>
 800033e:	bf00      	nop
 8000340:	20000000 	.word	0x20000000
 8000344:	20000030 	.word	0x20000030
 8000348:	20000038 	.word	0x20000038
 800034c:	20000048 	.word	0x20000048
 8000350:	2000003c 	.word	0x2000003c
 8000354:	20000040 	.word	0x20000040
 8000358:	20000034 	.word	0x20000034
 800035c:	20000044 	.word	0x20000044

08000360 <main>:
	}

}

int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
	clock_init();
 8000366:	f7ff ff03 	bl	8000170 <clock_init>
	EXTI_PinConfig_t EXTI_cfg;
	EXTI_cfg.EXTI_PIN = EXTI9PB9;
 800036a:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <main+0x48>)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000370:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_cfg.Trigger_Case = EXTI_Trigger_RISING;
 8000374:	2300      	movs	r3, #0
 8000376:	743b      	strb	r3, [r7, #16]
	EXTI_cfg.P_IRQ_CALLBACK = IRQ_EXTI9_callback;
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <main+0x4c>)
 800037a:	617b      	str	r3, [r7, #20]
	EXTI_cfg.IRQ_EN = EXTI_IRQ_Enable;
 800037c:	2301      	movs	r3, #1
 800037e:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&EXTI_cfg);
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	4618      	mov	r0, r3
 8000384:	f000 f9fa 	bl	800077c <MCAL_EXTI_GPIO_Init>

	SWITCH_CPU_AccessLevel(unprivileged);
 8000388:	2001      	movs	r0, #1
 800038a:	f7ff ff54 	bl	8000236 <SWITCH_CPU_AccessLevel>
	SWITCH_CPU_AccessLevel(privileged);
 800038e:	2000      	movs	r0, #0
 8000390:	f7ff ff51 	bl	8000236 <SWITCH_CPU_AccessLevel>

	MainOs();
 8000394:	f7ff ff70 	bl	8000278 <MainOs>

	while(1){
		if(IRQ_flag){
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <main+0x50>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0fb      	beq.n	8000398 <main+0x38>
			IRQ_flag = 0;
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <main+0x50>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
		if(IRQ_flag){
 80003a6:	e7f7      	b.n	8000398 <main+0x38>
 80003a8:	08000c4c 	.word	0x08000c4c
 80003ac:	080001a5 	.word	0x080001a5
 80003b0:	20000020 	.word	0x20000020

080003b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003bc:	480c      	ldr	r0, [pc, #48]	; (80003f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003be:	490d      	ldr	r1, [pc, #52]	; (80003f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c0:	4a0d      	ldr	r2, [pc, #52]	; (80003f8 <LoopForever+0xe>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c4:	e002      	b.n	80003cc <LoopCopyDataInit>

080003c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ca:	3304      	adds	r3, #4

080003cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d0:	d3f9      	bcc.n	80003c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d2:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d4:	4c0a      	ldr	r4, [pc, #40]	; (8000400 <LoopForever+0x16>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d8:	e001      	b.n	80003de <LoopFillZerobss>

080003da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003dc:	3204      	adds	r2, #4

080003de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e0:	d3fb      	bcc.n	80003da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e2:	f000 fc03 	bl	8000bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e6:	f7ff ffbb 	bl	8000360 <main>

080003ea <LoopForever>:

LoopForever:
    b LoopForever
 80003ea:	e7fe      	b.n	80003ea <LoopForever>
  ldr   r0, =_estack
 80003ec:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003f8:	08000c60 	.word	0x08000c60
  ldr r2, =_sbss
 80003fc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000400:	20000088 	.word	0x20000088

08000404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC1_2_IRQHandler>
	...

08000408 <Enable_NVIC>:
*                          Generic functions
*================================================================
*/

void Enable_NVIC (uint16_t EXTI_Line)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	80fb      	strh	r3, [r7, #6]
	switch (EXTI_Line)
 8000412:	88fb      	ldrh	r3, [r7, #6]
 8000414:	2b0f      	cmp	r3, #15
 8000416:	d854      	bhi.n	80004c2 <Enable_NVIC+0xba>
 8000418:	a201      	add	r2, pc, #4	; (adr r2, 8000420 <Enable_NVIC+0x18>)
 800041a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041e:	bf00      	nop
 8000420:	08000461 	.word	0x08000461
 8000424:	0800046f 	.word	0x0800046f
 8000428:	0800047d 	.word	0x0800047d
 800042c:	0800048b 	.word	0x0800048b
 8000430:	08000499 	.word	0x08000499
 8000434:	080004a7 	.word	0x080004a7
 8000438:	080004a7 	.word	0x080004a7
 800043c:	080004a7 	.word	0x080004a7
 8000440:	080004a7 	.word	0x080004a7
 8000444:	080004a7 	.word	0x080004a7
 8000448:	080004b5 	.word	0x080004b5
 800044c:	080004b5 	.word	0x080004b5
 8000450:	080004b5 	.word	0x080004b5
 8000454:	080004b5 	.word	0x080004b5
 8000458:	080004b5 	.word	0x080004b5
 800045c:	080004b5 	.word	0x080004b5
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <Enable_NVIC+0xc4>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a19      	ldr	r2, [pc, #100]	; (80004cc <Enable_NVIC+0xc4>)
 8000466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800046a:	6013      	str	r3, [r2, #0]
		break;
 800046c:	e029      	b.n	80004c2 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 800046e:	4b17      	ldr	r3, [pc, #92]	; (80004cc <Enable_NVIC+0xc4>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a16      	ldr	r2, [pc, #88]	; (80004cc <Enable_NVIC+0xc4>)
 8000474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000478:	6013      	str	r3, [r2, #0]
		break;
 800047a:	e022      	b.n	80004c2 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 800047c:	4b13      	ldr	r3, [pc, #76]	; (80004cc <Enable_NVIC+0xc4>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a12      	ldr	r2, [pc, #72]	; (80004cc <Enable_NVIC+0xc4>)
 8000482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000486:	6013      	str	r3, [r2, #0]
		break;
 8000488:	e01b      	b.n	80004c2 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <Enable_NVIC+0xc4>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a0f      	ldr	r2, [pc, #60]	; (80004cc <Enable_NVIC+0xc4>)
 8000490:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000494:	6013      	str	r3, [r2, #0]
		break;
 8000496:	e014      	b.n	80004c2 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <Enable_NVIC+0xc4>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a0b      	ldr	r2, [pc, #44]	; (80004cc <Enable_NVIC+0xc4>)
 800049e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004a2:	6013      	str	r3, [r2, #0]
		break;
 80004a4:	e00d      	b.n	80004c2 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI9_5_Enable;
 80004a6:	4b09      	ldr	r3, [pc, #36]	; (80004cc <Enable_NVIC+0xc4>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a08      	ldr	r2, [pc, #32]	; (80004cc <Enable_NVIC+0xc4>)
 80004ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004b0:	6013      	str	r3, [r2, #0]
		break;
 80004b2:	e006      	b.n	80004c2 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI15_10_Enable;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <Enable_NVIC+0xc8>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <Enable_NVIC+0xc8>)
 80004ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004be:	6013      	str	r3, [r2, #0]
		break;
 80004c0:	bf00      	nop
	}
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	e000e100 	.word	0xe000e100
 80004d0:	e000e104 	.word	0xe000e104

080004d4 <Disable_NVIC>:

void Disable_NVIC (uint16_t EXTI_Line)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	80fb      	strh	r3, [r7, #6]
	switch (EXTI_Line)
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	2b0f      	cmp	r3, #15
 80004e2:	d854      	bhi.n	800058e <Disable_NVIC+0xba>
 80004e4:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <Disable_NVIC+0x18>)
 80004e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ea:	bf00      	nop
 80004ec:	0800052d 	.word	0x0800052d
 80004f0:	0800053b 	.word	0x0800053b
 80004f4:	08000549 	.word	0x08000549
 80004f8:	08000557 	.word	0x08000557
 80004fc:	08000565 	.word	0x08000565
 8000500:	08000573 	.word	0x08000573
 8000504:	08000573 	.word	0x08000573
 8000508:	08000573 	.word	0x08000573
 800050c:	08000573 	.word	0x08000573
 8000510:	08000573 	.word	0x08000573
 8000514:	08000581 	.word	0x08000581
 8000518:	08000581 	.word	0x08000581
 800051c:	08000581 	.word	0x08000581
 8000520:	08000581 	.word	0x08000581
 8000524:	08000581 	.word	0x08000581
 8000528:	08000581 	.word	0x08000581
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 800052c:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <Disable_NVIC+0xc4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a19      	ldr	r2, [pc, #100]	; (8000598 <Disable_NVIC+0xc4>)
 8000532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000536:	6013      	str	r3, [r2, #0]
		break;
 8000538:	e029      	b.n	800058e <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 800053a:	4b17      	ldr	r3, [pc, #92]	; (8000598 <Disable_NVIC+0xc4>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a16      	ldr	r2, [pc, #88]	; (8000598 <Disable_NVIC+0xc4>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	6013      	str	r3, [r2, #0]
		break;
 8000546:	e022      	b.n	800058e <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <Disable_NVIC+0xc4>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a12      	ldr	r2, [pc, #72]	; (8000598 <Disable_NVIC+0xc4>)
 800054e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000552:	6013      	str	r3, [r2, #0]
		break;
 8000554:	e01b      	b.n	800058e <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <Disable_NVIC+0xc4>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <Disable_NVIC+0xc4>)
 800055c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000560:	6013      	str	r3, [r2, #0]
		break;
 8000562:	e014      	b.n	800058e <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <Disable_NVIC+0xc4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <Disable_NVIC+0xc4>)
 800056a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800056e:	6013      	str	r3, [r2, #0]
		break;
 8000570:	e00d      	b.n	800058e <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI9_5_Enable;
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <Disable_NVIC+0xc8>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a09      	ldr	r2, [pc, #36]	; (800059c <Disable_NVIC+0xc8>)
 8000578:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800057c:	6013      	str	r3, [r2, #0]
		break;
 800057e:	e006      	b.n	800058e <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 8000580:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <Disable_NVIC+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <Disable_NVIC+0xcc>)
 8000586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800058a:	6013      	str	r3, [r2, #0]
		break;
 800058c:	bf00      	nop
	}
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	e000e180 	.word	0xe000e180
 800059c:	e000e100 	.word	0xe000e100
 80005a0:	e000e184 	.word	0xe000e184

080005a4 <Update_EXTI>:


void Update_EXTI(EXTI_PinConfig_t *EXTI_Config)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    //	configure GPIO pin to be AF Input -> floating input
	GPIO_PConfig_t pinCfg;
	pinCfg.GPIO_PinNumber=EXTI_Config->EXTI_PIN.GPIO_PIN;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	891b      	ldrh	r3, [r3, #8]
 80005b0:	813b      	strh	r3, [r7, #8]
	pinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 80005b2:	2301      	movs	r3, #1
 80005b4:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &pinCfg);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	f107 0208 	add.w	r2, r7, #8
 80005be:	4611      	mov	r1, r2
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fa5a 	bl	8000a7a <MCAL_GPIO_Init>

	//update AFIO to Route between EXTI line with PORT A,B,C,D
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	089b      	lsrs	r3, r3, #2
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position= (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) *4;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	f003 0303 	and.w	r3, r3, #3
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	73bb      	strb	r3, [r7, #14]
	//clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~ (0xF <<AFIO_EXTICR_position);
 80005e0:	4a5f      	ldr	r2, [pc, #380]	; (8000760 <Update_EXTI+0x1bc>)
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	3302      	adds	r3, #2
 80005e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	210f      	movs	r1, #15
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	495a      	ldr	r1, [pc, #360]	; (8000760 <Update_EXTI+0x1bc>)
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	4002      	ands	r2, r0
 80005fc:	3302      	adds	r3, #2
 80005fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |=  ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) &0xF) <<AFIO_EXTICR_position);
 8000602:	4a57      	ldr	r2, [pc, #348]	; (8000760 <Update_EXTI+0x1bc>)
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	3302      	adds	r3, #2
 8000608:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	4954      	ldr	r1, [pc, #336]	; (8000764 <Update_EXTI+0x1c0>)
 8000612:	428b      	cmp	r3, r1
 8000614:	d016      	beq.n	8000644 <Update_EXTI+0xa0>
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	4953      	ldr	r1, [pc, #332]	; (8000768 <Update_EXTI+0x1c4>)
 800061c:	428b      	cmp	r3, r1
 800061e:	d00f      	beq.n	8000640 <Update_EXTI+0x9c>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	4951      	ldr	r1, [pc, #324]	; (800076c <Update_EXTI+0x1c8>)
 8000626:	428b      	cmp	r3, r1
 8000628:	d008      	beq.n	800063c <Update_EXTI+0x98>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	4950      	ldr	r1, [pc, #320]	; (8000770 <Update_EXTI+0x1cc>)
 8000630:	428b      	cmp	r3, r1
 8000632:	d101      	bne.n	8000638 <Update_EXTI+0x94>
 8000634:	2303      	movs	r3, #3
 8000636:	e006      	b.n	8000646 <Update_EXTI+0xa2>
 8000638:	2300      	movs	r3, #0
 800063a:	e004      	b.n	8000646 <Update_EXTI+0xa2>
 800063c:	2302      	movs	r3, #2
 800063e:	e002      	b.n	8000646 <Update_EXTI+0xa2>
 8000640:	2301      	movs	r3, #1
 8000642:	e000      	b.n	8000646 <Update_EXTI+0xa2>
 8000644:	2300      	movs	r3, #0
 8000646:	7bb9      	ldrb	r1, [r7, #14]
 8000648:	408b      	lsls	r3, r1
 800064a:	4618      	mov	r0, r3
 800064c:	4944      	ldr	r1, [pc, #272]	; (8000760 <Update_EXTI+0x1bc>)
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	4302      	orrs	r2, r0
 8000652:	3302      	adds	r3, #2
 8000654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Update Rising or falling Register
	//clear
	EXTI->RTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000658:	4b46      	ldr	r3, [pc, #280]	; (8000774 <Update_EXTI+0x1d0>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	8812      	ldrh	r2, [r2, #0]
 8000660:	4611      	mov	r1, r2
 8000662:	2201      	movs	r2, #1
 8000664:	408a      	lsls	r2, r1
 8000666:	43d2      	mvns	r2, r2
 8000668:	4611      	mov	r1, r2
 800066a:	4a42      	ldr	r2, [pc, #264]	; (8000774 <Update_EXTI+0x1d0>)
 800066c:	400b      	ands	r3, r1
 800066e:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000670:	4b40      	ldr	r3, [pc, #256]	; (8000774 <Update_EXTI+0x1d0>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	8812      	ldrh	r2, [r2, #0]
 8000678:	4611      	mov	r1, r2
 800067a:	2201      	movs	r2, #1
 800067c:	408a      	lsls	r2, r1
 800067e:	43d2      	mvns	r2, r2
 8000680:	4611      	mov	r1, r2
 8000682:	4a3c      	ldr	r2, [pc, #240]	; (8000774 <Update_EXTI+0x1d0>)
 8000684:	400b      	ands	r3, r1
 8000686:	60d3      	str	r3, [r2, #12]
	if(EXTI_Config->Trigger_Case==EXTI_Trigger_RISING)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7b1b      	ldrb	r3, [r3, #12]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d10b      	bne.n	80006a8 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000690:	4b38      	ldr	r3, [pc, #224]	; (8000774 <Update_EXTI+0x1d0>)
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	8812      	ldrh	r2, [r2, #0]
 8000698:	4611      	mov	r1, r2
 800069a:	2201      	movs	r2, #1
 800069c:	408a      	lsls	r2, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	4a34      	ldr	r2, [pc, #208]	; (8000774 <Update_EXTI+0x1d0>)
 80006a2:	430b      	orrs	r3, r1
 80006a4:	6093      	str	r3, [r2, #8]
 80006a6:	e029      	b.n	80006fc <Update_EXTI+0x158>

	}
	else if (EXTI_Config->Trigger_Case==EXTI_Trigger_FALLING)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	7b1b      	ldrb	r3, [r3, #12]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d10b      	bne.n	80006c8 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006b0:	4b30      	ldr	r3, [pc, #192]	; (8000774 <Update_EXTI+0x1d0>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	8812      	ldrh	r2, [r2, #0]
 80006b8:	4611      	mov	r1, r2
 80006ba:	2201      	movs	r2, #1
 80006bc:	408a      	lsls	r2, r1
 80006be:	4611      	mov	r1, r2
 80006c0:	4a2c      	ldr	r2, [pc, #176]	; (8000774 <Update_EXTI+0x1d0>)
 80006c2:	430b      	orrs	r3, r1
 80006c4:	60d3      	str	r3, [r2, #12]
 80006c6:	e019      	b.n	80006fc <Update_EXTI+0x158>

	}
	else if (EXTI_Config->Trigger_Case==EXTI_Trigger_RISING_and_FALLING)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7b1b      	ldrb	r3, [r3, #12]
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d115      	bne.n	80006fc <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <Update_EXTI+0x1d0>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	8812      	ldrh	r2, [r2, #0]
 80006d8:	4611      	mov	r1, r2
 80006da:	2201      	movs	r2, #1
 80006dc:	408a      	lsls	r2, r1
 80006de:	4611      	mov	r1, r2
 80006e0:	4a24      	ldr	r2, [pc, #144]	; (8000774 <Update_EXTI+0x1d0>)
 80006e2:	430b      	orrs	r3, r1
 80006e4:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <Update_EXTI+0x1d0>)
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	8812      	ldrh	r2, [r2, #0]
 80006ee:	4611      	mov	r1, r2
 80006f0:	2201      	movs	r2, #1
 80006f2:	408a      	lsls	r2, r1
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <Update_EXTI+0x1d0>)
 80006f8:	430b      	orrs	r3, r1
 80006fa:	60d3      	str	r3, [r2, #12]

	}

	//Update IRQ Handling CALLBACK
	GP_IRQ_CALLBACK[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CALLBACK;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	691b      	ldr	r3, [r3, #16]
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <Update_EXTI+0x1d4>)
 8000708:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//Enable/Disable IRQ EXTI & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7b5b      	ldrb	r3, [r3, #13]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d110      	bne.n	8000736 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <Update_EXTI+0x1d0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	8812      	ldrh	r2, [r2, #0]
 800071c:	4611      	mov	r1, r2
 800071e:	2201      	movs	r2, #1
 8000720:	408a      	lsls	r2, r1
 8000722:	4611      	mov	r1, r2
 8000724:	4a13      	ldr	r2, [pc, #76]	; (8000774 <Update_EXTI+0x1d0>)
 8000726:	430b      	orrs	r3, r1
 8000728:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fe6a 	bl	8000408 <Enable_NVIC>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);

	}

}
 8000734:	e010      	b.n	8000758 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <Update_EXTI+0x1d0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	8812      	ldrh	r2, [r2, #0]
 800073e:	4611      	mov	r1, r2
 8000740:	2201      	movs	r2, #1
 8000742:	408a      	lsls	r2, r1
 8000744:	43d2      	mvns	r2, r2
 8000746:	4611      	mov	r1, r2
 8000748:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <Update_EXTI+0x1d0>)
 800074a:	400b      	ands	r3, r1
 800074c:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff febe 	bl	80004d4 <Disable_NVIC>
}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40010000 	.word	0x40010000
 8000764:	40010800 	.word	0x40010800
 8000768:	40010c00 	.word	0x40010c00
 800076c:	40011000 	.word	0x40011000
 8000770:	40011400 	.word	0x40011400
 8000774:	40010400 	.word	0x40010400
 8000778:	2000004c 	.word	0x2000004c

0800077c <MCAL_EXTI_GPIO_Init>:
* @param [in] 				 -EXTI_Config set by @ref EXTI_define, EXTI_Trigger and EXTI_IRQ_define
* @retval  				     -none
* Note						 -LQFP48 Package has only GPIO A,B,part of C and D
*/
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t * EXTI_Config)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff0d 	bl	80005a4 <Update_EXTI>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <EXTI0_IRQHandler>:
*================================================================
*                          ISR functions
*================================================================
*/
void EXTI0_IRQHandler (void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<0;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <EXTI0_IRQHandler+0x1c>)
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <EXTI0_IRQHandler+0x1c>)
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[0]();
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <EXTI0_IRQHandler+0x20>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4798      	blx	r3
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40010400 	.word	0x40010400
 80007b4:	2000004c 	.word	0x2000004c

080007b8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<1;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <EXTI1_IRQHandler+0x1c>)
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <EXTI1_IRQHandler+0x1c>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[1]();
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <EXTI1_IRQHandler+0x20>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4798      	blx	r3
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40010400 	.word	0x40010400
 80007d8:	2000004c 	.word	0x2000004c

080007dc <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<2;
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <EXTI2_IRQHandler+0x1c>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <EXTI2_IRQHandler+0x1c>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[2]();
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <EXTI2_IRQHandler+0x20>)
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	4798      	blx	r3
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40010400 	.word	0x40010400
 80007fc:	2000004c 	.word	0x2000004c

08000800 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<3;
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <EXTI3_IRQHandler+0x1c>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <EXTI3_IRQHandler+0x1c>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[3]();
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <EXTI3_IRQHandler+0x20>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	4798      	blx	r3
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40010400 	.word	0x40010400
 8000820:	2000004c 	.word	0x2000004c

08000824 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<4;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <EXTI4_IRQHandler+0x1c>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <EXTI4_IRQHandler+0x1c>)
 800082e:	f043 0310 	orr.w	r3, r3, #16
 8000832:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[4]();
 8000834:	4b03      	ldr	r3, [pc, #12]	; (8000844 <EXTI4_IRQHandler+0x20>)
 8000836:	691b      	ldr	r3, [r3, #16]
 8000838:	4798      	blx	r3
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40010400 	.word	0x40010400
 8000844:	2000004c 	.word	0x2000004c

08000848 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CALLBACK[5](); }
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	f003 0320 	and.w	r3, r3, #32
 8000854:	2b00      	cmp	r3, #0
 8000856:	d008      	beq.n	800086a <EXTI9_5_IRQHandler+0x22>
 8000858:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	6153      	str	r3, [r2, #20]
 8000864:	4b21      	ldr	r3, [pc, #132]	; (80008ec <EXTI9_5_IRQHandler+0xa4>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CALLBACK[6](); }
 800086a:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000872:	2b00      	cmp	r3, #0
 8000874:	d008      	beq.n	8000888 <EXTI9_5_IRQHandler+0x40>
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000880:	6153      	str	r3, [r2, #20]
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <EXTI9_5_IRQHandler+0xa4>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CALLBACK[7](); }
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000890:	2b00      	cmp	r3, #0
 8000892:	d008      	beq.n	80008a6 <EXTI9_5_IRQHandler+0x5e>
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 800089a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089e:	6153      	str	r3, [r2, #20]
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <EXTI9_5_IRQHandler+0xa4>)
 80008a2:	69db      	ldr	r3, [r3, #28]
 80008a4:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CALLBACK[8](); }
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d008      	beq.n	80008c4 <EXTI9_5_IRQHandler+0x7c>
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 80008b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008bc:	6153      	str	r3, [r2, #20]
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <EXTI9_5_IRQHandler+0xa4>)
 80008c0:	6a1b      	ldr	r3, [r3, #32]
 80008c2:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CALLBACK[9](); }
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d008      	beq.n	80008e2 <EXTI9_5_IRQHandler+0x9a>
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <EXTI9_5_IRQHandler+0xa0>)
 80008d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008da:	6153      	str	r3, [r2, #20]
 80008dc:	4b03      	ldr	r3, [pc, #12]	; (80008ec <EXTI9_5_IRQHandler+0xa4>)
 80008de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e0:	4798      	blx	r3

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40010400 	.word	0x40010400
 80008ec:	2000004c 	.word	0x2000004c

080008f0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CALLBACK[10](); }
 80008f4:	4b2d      	ldr	r3, [pc, #180]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d008      	beq.n	8000912 <EXTI15_10_IRQHandler+0x22>
 8000900:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 8000902:	695b      	ldr	r3, [r3, #20]
 8000904:	4a29      	ldr	r2, [pc, #164]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	6153      	str	r3, [r2, #20]
 800090c:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <EXTI15_10_IRQHandler+0xc0>)
 800090e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000910:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CALLBACK[11](); }
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800091a:	2b00      	cmp	r3, #0
 800091c:	d008      	beq.n	8000930 <EXTI15_10_IRQHandler+0x40>
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a22      	ldr	r2, [pc, #136]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 8000924:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <EXTI15_10_IRQHandler+0xc0>)
 800092c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092e:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CALLBACK[12](); }
 8000930:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d008      	beq.n	800094e <EXTI15_10_IRQHandler+0x5e>
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 8000942:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000946:	6153      	str	r3, [r2, #20]
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <EXTI15_10_IRQHandler+0xc0>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CALLBACK[13](); }
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000956:	2b00      	cmp	r3, #0
 8000958:	d008      	beq.n	800096c <EXTI15_10_IRQHandler+0x7c>
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	4a13      	ldr	r2, [pc, #76]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 8000960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000964:	6153      	str	r3, [r2, #20]
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <EXTI15_10_IRQHandler+0xc0>)
 8000968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800096a:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CALLBACK[14](); }
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d008      	beq.n	800098a <EXTI15_10_IRQHandler+0x9a>
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 800097e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000982:	6153      	str	r3, [r2, #20]
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <EXTI15_10_IRQHandler+0xc0>)
 8000986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000988:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CALLBACK[15](); }
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000992:	2b00      	cmp	r3, #0
 8000994:	d008      	beq.n	80009a8 <EXTI15_10_IRQHandler+0xb8>
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <EXTI15_10_IRQHandler+0xbc>)
 800099c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009a0:	6153      	str	r3, [r2, #20]
 80009a2:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <EXTI15_10_IRQHandler+0xc0>)
 80009a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009a6:	4798      	blx	r3

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40010400 	.word	0x40010400
 80009b0:	2000004c 	.word	0x2000004c

080009b4 <Get_CRLH_Position>:
 *      Author: ahmed osama
 */
#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	2b80      	cmp	r3, #128	; 0x80
 80009c2:	d042      	beq.n	8000a4a <Get_CRLH_Position+0x96>
 80009c4:	2b80      	cmp	r3, #128	; 0x80
 80009c6:	dc11      	bgt.n	80009ec <Get_CRLH_Position+0x38>
 80009c8:	2b08      	cmp	r3, #8
 80009ca:	d036      	beq.n	8000a3a <Get_CRLH_Position+0x86>
 80009cc:	2b08      	cmp	r3, #8
 80009ce:	dc06      	bgt.n	80009de <Get_CRLH_Position+0x2a>
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d02e      	beq.n	8000a32 <Get_CRLH_Position+0x7e>
 80009d4:	2b04      	cmp	r3, #4
 80009d6:	d02e      	beq.n	8000a36 <Get_CRLH_Position+0x82>
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d028      	beq.n	8000a2e <Get_CRLH_Position+0x7a>
 80009dc:	e047      	b.n	8000a6e <Get_CRLH_Position+0xba>
 80009de:	2b20      	cmp	r3, #32
 80009e0:	d02f      	beq.n	8000a42 <Get_CRLH_Position+0x8e>
 80009e2:	2b40      	cmp	r3, #64	; 0x40
 80009e4:	d02f      	beq.n	8000a46 <Get_CRLH_Position+0x92>
 80009e6:	2b10      	cmp	r3, #16
 80009e8:	d029      	beq.n	8000a3e <Get_CRLH_Position+0x8a>
 80009ea:	e040      	b.n	8000a6e <Get_CRLH_Position+0xba>
 80009ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009f0:	d033      	beq.n	8000a5a <Get_CRLH_Position+0xa6>
 80009f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009f6:	dc09      	bgt.n	8000a0c <Get_CRLH_Position+0x58>
 80009f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009fc:	d029      	beq.n	8000a52 <Get_CRLH_Position+0x9e>
 80009fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a02:	d028      	beq.n	8000a56 <Get_CRLH_Position+0xa2>
 8000a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a08:	d021      	beq.n	8000a4e <Get_CRLH_Position+0x9a>
 8000a0a:	e030      	b.n	8000a6e <Get_CRLH_Position+0xba>
 8000a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a10:	d027      	beq.n	8000a62 <Get_CRLH_Position+0xae>
 8000a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a16:	dc03      	bgt.n	8000a20 <Get_CRLH_Position+0x6c>
 8000a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a1c:	d01f      	beq.n	8000a5e <Get_CRLH_Position+0xaa>
 8000a1e:	e026      	b.n	8000a6e <Get_CRLH_Position+0xba>
 8000a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a24:	d01f      	beq.n	8000a66 <Get_CRLH_Position+0xb2>
 8000a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a2a:	d01e      	beq.n	8000a6a <Get_CRLH_Position+0xb6>
 8000a2c:	e01f      	b.n	8000a6e <Get_CRLH_Position+0xba>
	{
		case GPIO_PIN_0 : return 0;  break;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e01e      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_1 : return 4;  break;
 8000a32:	2304      	movs	r3, #4
 8000a34:	e01c      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_2 : return 8;  break;
 8000a36:	2308      	movs	r3, #8
 8000a38:	e01a      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_3 : return 12; break;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	e018      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_4 : return 16; break;
 8000a3e:	2310      	movs	r3, #16
 8000a40:	e016      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_5 : return 20; break;
 8000a42:	2314      	movs	r3, #20
 8000a44:	e014      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_6 : return 24; break;
 8000a46:	2318      	movs	r3, #24
 8000a48:	e012      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_7 : return 28; break;
 8000a4a:	231c      	movs	r3, #28
 8000a4c:	e010      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_8 : return 0;  break;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e00e      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_9 : return 4;  break;
 8000a52:	2304      	movs	r3, #4
 8000a54:	e00c      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_10: return 8;  break;
 8000a56:	2308      	movs	r3, #8
 8000a58:	e00a      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_11: return 12; break;
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	e008      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_12: return 16; break;
 8000a5e:	2310      	movs	r3, #16
 8000a60:	e006      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_13: return 20; break;
 8000a62:	2314      	movs	r3, #20
 8000a64:	e004      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_14: return 24; break;
 8000a66:	2318      	movs	r3, #24
 8000a68:	e002      	b.n	8000a70 <Get_CRLH_Position+0xbc>
		case GPIO_PIN_15: return 28; break;
 8000a6a:	231c      	movs	r3, #28
 8000a6c:	e000      	b.n	8000a70 <Get_CRLH_Position+0xbc>
	}
	return 0;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <MCAL_GPIO_Init>:

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PConfig_t* PinConfig)
{
 8000a7a:	b590      	push	{r4, r7, lr}
 8000a7c:	b085      	sub	sp, #20
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
	uint8_t PIN_Config=0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	73fb      	strb	r3, [r7, #15]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 to 7
	//Port configuration register high (GPIOx_CRH) Configure PINS from 8 to 15
	volatile uint32_t* Config_Register=NULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
	Config_Register= (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	2bff      	cmp	r3, #255	; 0xff
 8000a92:	d801      	bhi.n	8000a98 <MCAL_GPIO_Init+0x1e>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	e001      	b.n	8000a9c <MCAL_GPIO_Init+0x22>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] MODE[0:0]
	*(Config_Register) &= ~ (0xf<< Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff86 	bl	80009b4 <Get_CRLH_Position>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	461a      	mov	r2, r3
 8000aac:	230f      	movs	r3, #15
 8000aae:	4093      	lsls	r3, r2
 8000ab0:	43da      	mvns	r2, r3
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	601a      	str	r2, [r3, #0]

	//if pin is output
	if(PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_PP || PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_OD ||  PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_PP || PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_OD  )
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	789b      	ldrb	r3, [r3, #2]
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d00b      	beq.n	8000adc <MCAL_GPIO_Init+0x62>
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	789b      	ldrb	r3, [r3, #2]
 8000ac8:	2b05      	cmp	r3, #5
 8000aca:	d007      	beq.n	8000adc <MCAL_GPIO_Init+0x62>
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	789b      	ldrb	r3, [r3, #2]
 8000ad0:	2b06      	cmp	r3, #6
 8000ad2:	d003      	beq.n	8000adc <MCAL_GPIO_Init+0x62>
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	789b      	ldrb	r3, [r3, #2]
 8000ad8:	2b07      	cmp	r3, #7
 8000ada:	d10e      	bne.n	8000afa <MCAL_GPIO_Init+0x80>
	{
		//set CNF[1:0] MODE[1:0]
		PIN_Config =( (((PinConfig->GPIO_MODE - 4) << 2 )| (PinConfig->GPIO_Output_SPeed)) & 0x0F);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	789b      	ldrb	r3, [r3, #2]
 8000ae0:	3b04      	subs	r3, #4
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	b25a      	sxtb	r2, r3
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	78db      	ldrb	r3, [r3, #3]
 8000aea:	b25b      	sxtb	r3, r3
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b25b      	sxtb	r3, r3
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	73fb      	strb	r3, [r7, #15]
 8000af8:	e02c      	b.n	8000b54 <MCAL_GPIO_Init+0xda>
	}

	//if pin is input
	else //MODE = 00: Input mode (reset state)
	{
		if(PinConfig->GPIO_MODE==GPIO_MODE_Analog || PinConfig->GPIO_MODE==GPIO_MODE_INPUT_FLO)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	789b      	ldrb	r3, [r3, #2]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <MCAL_GPIO_Init+0x90>
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	789b      	ldrb	r3, [r3, #2]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d107      	bne.n	8000b1a <MCAL_GPIO_Init+0xa0>
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((PinConfig->GPIO_MODE) << 2 )| 0x0) & 0x0F);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	789b      	ldrb	r3, [r3, #2]
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	e01c      	b.n	8000b54 <MCAL_GPIO_Init+0xda>

		}
		else if(PinConfig->GPIO_MODE==GPIO_MODE_INPUT_AF)                   //consider it input floating
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	789b      	ldrb	r3, [r3, #2]
 8000b1e:	2b08      	cmp	r3, #8
 8000b20:	d102      	bne.n	8000b28 <MCAL_GPIO_Init+0xae>
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((GPIO_MODE_INPUT_FLO) << 2 )| (0x0)) & 0x0F);
 8000b22:	2304      	movs	r3, #4
 8000b24:	73fb      	strb	r3, [r7, #15]
 8000b26:	e015      	b.n	8000b54 <MCAL_GPIO_Init+0xda>

		}
		else
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((GPIO_MODE_INPUT_PU) << 2 )| (0x0)) & 0x0F);
 8000b28:	2308      	movs	r3, #8
 8000b2a:	73fb      	strb	r3, [r7, #15]
			//PD or PP
			if(PinConfig->GPIO_MODE==GPIO_MODE_INPUT_PU)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	789b      	ldrb	r3, [r3, #2]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d107      	bne.n	8000b44 <MCAL_GPIO_Init+0xca>
			{
				//in Table 20. port bit configuration table set PxODR 1 for input pull_up
				GPIOx->ODR |=  PinConfig->GPIO_PinNumber;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	8812      	ldrh	r2, [r2, #0]
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	e007      	b.n	8000b54 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//in Table 20. port bit configuration table set PxODR 0 for input pull_down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	8812      	ldrh	r2, [r2, #0]
 8000b4c:	43d2      	mvns	r2, r2
 8000b4e:	401a      	ands	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	*(Config_Register) |= PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber);
 8000b54:	7bfc      	ldrb	r4, [r7, #15]
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff2a 	bl	80009b4 <Get_CRLH_Position>
 8000b60:	4603      	mov	r3, r0
 8000b62:	fa04 f203 	lsl.w	r2, r4, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	601a      	str	r2, [r3, #0]

}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd90      	pop	{r4, r7, pc}

08000b78 <SPI1_IRQHandler>:
 *                         IRQ
 * ===========================================================
 */

void SPI1_IRQHandler (void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <SPI1_IRQHandler+0x18>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	7938      	ldrb	r0, [r7, #4]
 8000b86:	4798      	blx	r3

}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000024 	.word	0x20000024

08000b94 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <SPI2_IRQHandler+0x18>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	7938      	ldrb	r0, [r7, #4]
 8000ba2:	4798      	blx	r3
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000024 	.word	0x20000024

08000bb0 <USART1_IRQHandler>:
                itr++;
            }
}
//ISR
void USART1_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000bb4:	4b02      	ldr	r3, [pc, #8]	; (8000bc0 <USART1_IRQHandler+0x10>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	4798      	blx	r3
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000002c 	.word	0x2000002c

08000bc4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <USART2_IRQHandler+0x10>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	4798      	blx	r3
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000002c 	.word	0x2000002c

08000bd8 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <USART3_IRQHandler+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	4798      	blx	r3
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000002c 	.word	0x2000002c

08000bec <__libc_init_array>:
 8000bec:	b570      	push	{r4, r5, r6, lr}
 8000bee:	2500      	movs	r5, #0
 8000bf0:	4e0c      	ldr	r6, [pc, #48]	; (8000c24 <__libc_init_array+0x38>)
 8000bf2:	4c0d      	ldr	r4, [pc, #52]	; (8000c28 <__libc_init_array+0x3c>)
 8000bf4:	1ba4      	subs	r4, r4, r6
 8000bf6:	10a4      	asrs	r4, r4, #2
 8000bf8:	42a5      	cmp	r5, r4
 8000bfa:	d109      	bne.n	8000c10 <__libc_init_array+0x24>
 8000bfc:	f000 f81a 	bl	8000c34 <_init>
 8000c00:	2500      	movs	r5, #0
 8000c02:	4e0a      	ldr	r6, [pc, #40]	; (8000c2c <__libc_init_array+0x40>)
 8000c04:	4c0a      	ldr	r4, [pc, #40]	; (8000c30 <__libc_init_array+0x44>)
 8000c06:	1ba4      	subs	r4, r4, r6
 8000c08:	10a4      	asrs	r4, r4, #2
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	d105      	bne.n	8000c1a <__libc_init_array+0x2e>
 8000c0e:	bd70      	pop	{r4, r5, r6, pc}
 8000c10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c14:	4798      	blx	r3
 8000c16:	3501      	adds	r5, #1
 8000c18:	e7ee      	b.n	8000bf8 <__libc_init_array+0xc>
 8000c1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c1e:	4798      	blx	r3
 8000c20:	3501      	adds	r5, #1
 8000c22:	e7f2      	b.n	8000c0a <__libc_init_array+0x1e>
 8000c24:	08000c58 	.word	0x08000c58
 8000c28:	08000c58 	.word	0x08000c58
 8000c2c:	08000c58 	.word	0x08000c58
 8000c30:	08000c5c 	.word	0x08000c5c

08000c34 <_init>:
 8000c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c36:	bf00      	nop
 8000c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c3a:	bc08      	pop	{r3}
 8000c3c:	469e      	mov	lr, r3
 8000c3e:	4770      	bx	lr

08000c40 <_fini>:
 8000c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c42:	bf00      	nop
 8000c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c46:	bc08      	pop	{r3}
 8000c48:	469e      	mov	lr, r3
 8000c4a:	4770      	bx	lr
