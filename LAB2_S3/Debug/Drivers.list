
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000988  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000ab8  08000ab8  00010ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ac4  08000ac4  00010acc  2**0
                  CONTENTS
  4 .ARM          00000000  08000ac4  08000ac4  00010acc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ac4  08000acc  00010acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ac4  08000ac4  00010ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ac8  08000ac8  00010ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000000  08000acc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000acc  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010acc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000443f  00000000  00000000  00010af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009f4  00000000  00000000  00014f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000cb0  00000000  00000000  00015928  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001f8  00000000  00000000  000165d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001a0  00000000  00000000  000167d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000e29  00000000  00000000  00016970  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000021c5  00000000  00000000  00017799  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c543  00000000  00000000  0001995e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00025ea1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000678  00000000  00000000  00025f1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000aa0 	.word	0x08000aa0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000aa0 	.word	0x08000aa0

08000170 <clock_init>:
#include "TIM.h"

uint32_t IRQ_flag = 0;

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//Enable port A clock
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	//Enable port B clock
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	//Enable AFIO clock
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <IRQ_EXTI9_callback>:

void IRQ_EXTI9_callback(void){
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	IRQ_flag = 1;
 80001a8:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <IRQ_EXTI9_callback+0x14>)
 80001aa:	2201      	movs	r2, #1
 80001ac:	601a      	str	r2, [r3, #0]
}
 80001ae:	bf00      	nop
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	2000001c 	.word	0x2000001c

080001bc <main>:

int VAL1=0;
int main(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b086      	sub	sp, #24
 80001c0:	af00      	add	r7, sp, #0
	clock_init();
 80001c2:	f7ff ffd5 	bl	8000170 <clock_init>
	EXTI_PinConfig_t EXTI_cfg;
	EXTI_cfg.EXTI_PIN = EXTI9PB9;
 80001c6:	4a12      	ldr	r2, [pc, #72]	; (8000210 <main+0x54>)
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80001cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_cfg.Trigger_Case = EXTI_Trigger_RISING;
 80001d0:	2300      	movs	r3, #0
 80001d2:	743b      	strb	r3, [r7, #16]
	EXTI_cfg.P_IRQ_CALLBACK = IRQ_EXTI9_callback;
 80001d4:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <main+0x58>)
 80001d6:	617b      	str	r3, [r7, #20]
	EXTI_cfg.IRQ_EN = EXTI_IRQ_Enable;
 80001d8:	2301      	movs	r3, #1
 80001da:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&EXTI_cfg);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 fa02 	bl	80005e8 <MCAL_EXTI_GPIO_Init>
	IRQ_flag = 1;
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <main+0x5c>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	601a      	str	r2, [r3, #0]

	__asm("nop \n\t nop \n\t nop");
 80001ea:	bf00      	nop
 80001ec:	bf00      	nop
 80001ee:	bf00      	nop

	//mov VAL1,oxff
	__asm("mov %0 ,#0xff"
 80001f0:	f04f 03ff 	mov.w	r3, #255	; 0xff
 80001f4:	4a09      	ldr	r2, [pc, #36]	; (800021c <main+0x60>)
 80001f6:	6013      	str	r3, [r2, #0]
			:"=r" (VAL1) );
	__asm("nop \n\t nop \n\t nop");
 80001f8:	bf00      	nop
 80001fa:	bf00      	nop
 80001fc:	bf00      	nop

	while(1){
		if(IRQ_flag){
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <main+0x5c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0fb      	beq.n	80001fe <main+0x42>
			IRQ_flag = 0;
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <main+0x5c>)
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
		if(IRQ_flag){
 800020c:	e7f7      	b.n	80001fe <main+0x42>
 800020e:	bf00      	nop
 8000210:	08000ab8 	.word	0x08000ab8
 8000214:	080001a5 	.word	0x080001a5
 8000218:	2000001c 	.word	0x2000001c
 800021c:	20000020 	.word	0x20000020

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000224:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 800022a:	490d      	ldr	r1, [pc, #52]	; (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000230:	e002      	b.n	8000238 <LoopCopyDataInit>

08000232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000236:	3304      	adds	r3, #4

08000238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800023c:	d3f9      	bcc.n	8000232 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000240:	4c0a      	ldr	r4, [pc, #40]	; (800026c <LoopForever+0x16>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000244:	e001      	b.n	800024a <LoopFillZerobss>

08000246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000248:	3204      	adds	r2, #4

0800024a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800024c:	d3fb      	bcc.n	8000246 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024e:	f000 fc03 	bl	8000a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f7ff ffb3 	bl	80001bc <main>

08000256 <LoopForever>:

LoopForever:
    b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000264:	08000acc 	.word	0x08000acc
  ldr r2, =_sbss
 8000268:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800026c:	2000006c 	.word	0x2000006c

08000270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC1_2_IRQHandler>
	...

08000274 <Enable_NVIC>:
*                          Generic functions
*================================================================
*/

void Enable_NVIC (uint16_t EXTI_Line)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	80fb      	strh	r3, [r7, #6]
	switch (EXTI_Line)
 800027e:	88fb      	ldrh	r3, [r7, #6]
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d854      	bhi.n	800032e <Enable_NVIC+0xba>
 8000284:	a201      	add	r2, pc, #4	; (adr r2, 800028c <Enable_NVIC+0x18>)
 8000286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800028a:	bf00      	nop
 800028c:	080002cd 	.word	0x080002cd
 8000290:	080002db 	.word	0x080002db
 8000294:	080002e9 	.word	0x080002e9
 8000298:	080002f7 	.word	0x080002f7
 800029c:	08000305 	.word	0x08000305
 80002a0:	08000313 	.word	0x08000313
 80002a4:	08000313 	.word	0x08000313
 80002a8:	08000313 	.word	0x08000313
 80002ac:	08000313 	.word	0x08000313
 80002b0:	08000313 	.word	0x08000313
 80002b4:	08000321 	.word	0x08000321
 80002b8:	08000321 	.word	0x08000321
 80002bc:	08000321 	.word	0x08000321
 80002c0:	08000321 	.word	0x08000321
 80002c4:	08000321 	.word	0x08000321
 80002c8:	08000321 	.word	0x08000321
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 80002cc:	4b1a      	ldr	r3, [pc, #104]	; (8000338 <Enable_NVIC+0xc4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a19      	ldr	r2, [pc, #100]	; (8000338 <Enable_NVIC+0xc4>)
 80002d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002d6:	6013      	str	r3, [r2, #0]
		break;
 80002d8:	e029      	b.n	800032e <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <Enable_NVIC+0xc4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a16      	ldr	r2, [pc, #88]	; (8000338 <Enable_NVIC+0xc4>)
 80002e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002e4:	6013      	str	r3, [r2, #0]
		break;
 80002e6:	e022      	b.n	800032e <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <Enable_NVIC+0xc4>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a12      	ldr	r2, [pc, #72]	; (8000338 <Enable_NVIC+0xc4>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f2:	6013      	str	r3, [r2, #0]
		break;
 80002f4:	e01b      	b.n	800032e <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 80002f6:	4b10      	ldr	r3, [pc, #64]	; (8000338 <Enable_NVIC+0xc4>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a0f      	ldr	r2, [pc, #60]	; (8000338 <Enable_NVIC+0xc4>)
 80002fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000300:	6013      	str	r3, [r2, #0]
		break;
 8000302:	e014      	b.n	800032e <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <Enable_NVIC+0xc4>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a0b      	ldr	r2, [pc, #44]	; (8000338 <Enable_NVIC+0xc4>)
 800030a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800030e:	6013      	str	r3, [r2, #0]
		break;
 8000310:	e00d      	b.n	800032e <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI9_5_Enable;
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <Enable_NVIC+0xc4>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a08      	ldr	r2, [pc, #32]	; (8000338 <Enable_NVIC+0xc4>)
 8000318:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800031c:	6013      	str	r3, [r2, #0]
		break;
 800031e:	e006      	b.n	800032e <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI15_10_Enable;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <Enable_NVIC+0xc8>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a05      	ldr	r2, [pc, #20]	; (800033c <Enable_NVIC+0xc8>)
 8000326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800032a:	6013      	str	r3, [r2, #0]
		break;
 800032c:	bf00      	nop
	}
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	e000e100 	.word	0xe000e100
 800033c:	e000e104 	.word	0xe000e104

08000340 <Disable_NVIC>:

void Disable_NVIC (uint16_t EXTI_Line)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	80fb      	strh	r3, [r7, #6]
	switch (EXTI_Line)
 800034a:	88fb      	ldrh	r3, [r7, #6]
 800034c:	2b0f      	cmp	r3, #15
 800034e:	d854      	bhi.n	80003fa <Disable_NVIC+0xba>
 8000350:	a201      	add	r2, pc, #4	; (adr r2, 8000358 <Disable_NVIC+0x18>)
 8000352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000356:	bf00      	nop
 8000358:	08000399 	.word	0x08000399
 800035c:	080003a7 	.word	0x080003a7
 8000360:	080003b5 	.word	0x080003b5
 8000364:	080003c3 	.word	0x080003c3
 8000368:	080003d1 	.word	0x080003d1
 800036c:	080003df 	.word	0x080003df
 8000370:	080003df 	.word	0x080003df
 8000374:	080003df 	.word	0x080003df
 8000378:	080003df 	.word	0x080003df
 800037c:	080003df 	.word	0x080003df
 8000380:	080003ed 	.word	0x080003ed
 8000384:	080003ed 	.word	0x080003ed
 8000388:	080003ed 	.word	0x080003ed
 800038c:	080003ed 	.word	0x080003ed
 8000390:	080003ed 	.word	0x080003ed
 8000394:	080003ed 	.word	0x080003ed
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 8000398:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <Disable_NVIC+0xc4>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a19      	ldr	r2, [pc, #100]	; (8000404 <Disable_NVIC+0xc4>)
 800039e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a2:	6013      	str	r3, [r2, #0]
		break;
 80003a4:	e029      	b.n	80003fa <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <Disable_NVIC+0xc4>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a16      	ldr	r2, [pc, #88]	; (8000404 <Disable_NVIC+0xc4>)
 80003ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b0:	6013      	str	r3, [r2, #0]
		break;
 80003b2:	e022      	b.n	80003fa <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <Disable_NVIC+0xc4>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a12      	ldr	r2, [pc, #72]	; (8000404 <Disable_NVIC+0xc4>)
 80003ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003be:	6013      	str	r3, [r2, #0]
		break;
 80003c0:	e01b      	b.n	80003fa <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <Disable_NVIC+0xc4>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a0f      	ldr	r2, [pc, #60]	; (8000404 <Disable_NVIC+0xc4>)
 80003c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003cc:	6013      	str	r3, [r2, #0]
		break;
 80003ce:	e014      	b.n	80003fa <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <Disable_NVIC+0xc4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a0b      	ldr	r2, [pc, #44]	; (8000404 <Disable_NVIC+0xc4>)
 80003d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003da:	6013      	str	r3, [r2, #0]
		break;
 80003dc:	e00d      	b.n	80003fa <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI9_5_Enable;
 80003de:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <Disable_NVIC+0xc8>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a09      	ldr	r2, [pc, #36]	; (8000408 <Disable_NVIC+0xc8>)
 80003e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003e8:	6013      	str	r3, [r2, #0]
		break;
 80003ea:	e006      	b.n	80003fa <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <Disable_NVIC+0xcc>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a06      	ldr	r2, [pc, #24]	; (800040c <Disable_NVIC+0xcc>)
 80003f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f6:	6013      	str	r3, [r2, #0]
		break;
 80003f8:	bf00      	nop
	}
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	e000e180 	.word	0xe000e180
 8000408:	e000e100 	.word	0xe000e100
 800040c:	e000e184 	.word	0xe000e184

08000410 <Update_EXTI>:


void Update_EXTI(EXTI_PinConfig_t *EXTI_Config)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
    //	configure GPIO pin to be AF Input -> floating input
	GPIO_PConfig_t pinCfg;
	pinCfg.GPIO_PinNumber=EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	891b      	ldrh	r3, [r3, #8]
 800041c:	813b      	strh	r3, [r7, #8]
	pinCfg.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 800041e:	2301      	movs	r3, #1
 8000420:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &pinCfg);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	f107 0208 	add.w	r2, r7, #8
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f000 fa5a 	bl	80008e6 <MCAL_GPIO_Init>

	//update AFIO to Route between EXTI line with PORT A,B,C,D
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	881b      	ldrh	r3, [r3, #0]
 8000436:	089b      	lsrs	r3, r3, #2
 8000438:	b29b      	uxth	r3, r3
 800043a:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position= (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) *4;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	f003 0303 	and.w	r3, r3, #3
 8000446:	b2db      	uxtb	r3, r3
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	73bb      	strb	r3, [r7, #14]
	//clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~ (0xF <<AFIO_EXTICR_position);
 800044c:	4a5f      	ldr	r2, [pc, #380]	; (80005cc <Update_EXTI+0x1bc>)
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	3302      	adds	r3, #2
 8000452:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000456:	7bbb      	ldrb	r3, [r7, #14]
 8000458:	210f      	movs	r1, #15
 800045a:	fa01 f303 	lsl.w	r3, r1, r3
 800045e:	43db      	mvns	r3, r3
 8000460:	4618      	mov	r0, r3
 8000462:	495a      	ldr	r1, [pc, #360]	; (80005cc <Update_EXTI+0x1bc>)
 8000464:	7bfb      	ldrb	r3, [r7, #15]
 8000466:	4002      	ands	r2, r0
 8000468:	3302      	adds	r3, #2
 800046a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |=  ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) &0xF) <<AFIO_EXTICR_position);
 800046e:	4a57      	ldr	r2, [pc, #348]	; (80005cc <Update_EXTI+0x1bc>)
 8000470:	7bfb      	ldrb	r3, [r7, #15]
 8000472:	3302      	adds	r3, #2
 8000474:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	4954      	ldr	r1, [pc, #336]	; (80005d0 <Update_EXTI+0x1c0>)
 800047e:	428b      	cmp	r3, r1
 8000480:	d016      	beq.n	80004b0 <Update_EXTI+0xa0>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	4953      	ldr	r1, [pc, #332]	; (80005d4 <Update_EXTI+0x1c4>)
 8000488:	428b      	cmp	r3, r1
 800048a:	d00f      	beq.n	80004ac <Update_EXTI+0x9c>
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	4951      	ldr	r1, [pc, #324]	; (80005d8 <Update_EXTI+0x1c8>)
 8000492:	428b      	cmp	r3, r1
 8000494:	d008      	beq.n	80004a8 <Update_EXTI+0x98>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	4950      	ldr	r1, [pc, #320]	; (80005dc <Update_EXTI+0x1cc>)
 800049c:	428b      	cmp	r3, r1
 800049e:	d101      	bne.n	80004a4 <Update_EXTI+0x94>
 80004a0:	2303      	movs	r3, #3
 80004a2:	e006      	b.n	80004b2 <Update_EXTI+0xa2>
 80004a4:	2300      	movs	r3, #0
 80004a6:	e004      	b.n	80004b2 <Update_EXTI+0xa2>
 80004a8:	2302      	movs	r3, #2
 80004aa:	e002      	b.n	80004b2 <Update_EXTI+0xa2>
 80004ac:	2301      	movs	r3, #1
 80004ae:	e000      	b.n	80004b2 <Update_EXTI+0xa2>
 80004b0:	2300      	movs	r3, #0
 80004b2:	7bb9      	ldrb	r1, [r7, #14]
 80004b4:	408b      	lsls	r3, r1
 80004b6:	4618      	mov	r0, r3
 80004b8:	4944      	ldr	r1, [pc, #272]	; (80005cc <Update_EXTI+0x1bc>)
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	4302      	orrs	r2, r0
 80004be:	3302      	adds	r3, #2
 80004c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//Update Rising or falling Register
	//clear
	EXTI->RTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80004c4:	4b46      	ldr	r3, [pc, #280]	; (80005e0 <Update_EXTI+0x1d0>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	8812      	ldrh	r2, [r2, #0]
 80004cc:	4611      	mov	r1, r2
 80004ce:	2201      	movs	r2, #1
 80004d0:	408a      	lsls	r2, r1
 80004d2:	43d2      	mvns	r2, r2
 80004d4:	4611      	mov	r1, r2
 80004d6:	4a42      	ldr	r2, [pc, #264]	; (80005e0 <Update_EXTI+0x1d0>)
 80004d8:	400b      	ands	r3, r1
 80004da:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80004dc:	4b40      	ldr	r3, [pc, #256]	; (80005e0 <Update_EXTI+0x1d0>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	8812      	ldrh	r2, [r2, #0]
 80004e4:	4611      	mov	r1, r2
 80004e6:	2201      	movs	r2, #1
 80004e8:	408a      	lsls	r2, r1
 80004ea:	43d2      	mvns	r2, r2
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a3c      	ldr	r2, [pc, #240]	; (80005e0 <Update_EXTI+0x1d0>)
 80004f0:	400b      	ands	r3, r1
 80004f2:	60d3      	str	r3, [r2, #12]
	if(EXTI_Config->Trigger_Case==EXTI_Trigger_RISING)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	7b1b      	ldrb	r3, [r3, #12]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d10b      	bne.n	8000514 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80004fc:	4b38      	ldr	r3, [pc, #224]	; (80005e0 <Update_EXTI+0x1d0>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	8812      	ldrh	r2, [r2, #0]
 8000504:	4611      	mov	r1, r2
 8000506:	2201      	movs	r2, #1
 8000508:	408a      	lsls	r2, r1
 800050a:	4611      	mov	r1, r2
 800050c:	4a34      	ldr	r2, [pc, #208]	; (80005e0 <Update_EXTI+0x1d0>)
 800050e:	430b      	orrs	r3, r1
 8000510:	6093      	str	r3, [r2, #8]
 8000512:	e029      	b.n	8000568 <Update_EXTI+0x158>

	}
	else if (EXTI_Config->Trigger_Case==EXTI_Trigger_FALLING)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	7b1b      	ldrb	r3, [r3, #12]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d10b      	bne.n	8000534 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800051c:	4b30      	ldr	r3, [pc, #192]	; (80005e0 <Update_EXTI+0x1d0>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	8812      	ldrh	r2, [r2, #0]
 8000524:	4611      	mov	r1, r2
 8000526:	2201      	movs	r2, #1
 8000528:	408a      	lsls	r2, r1
 800052a:	4611      	mov	r1, r2
 800052c:	4a2c      	ldr	r2, [pc, #176]	; (80005e0 <Update_EXTI+0x1d0>)
 800052e:	430b      	orrs	r3, r1
 8000530:	60d3      	str	r3, [r2, #12]
 8000532:	e019      	b.n	8000568 <Update_EXTI+0x158>

	}
	else if (EXTI_Config->Trigger_Case==EXTI_Trigger_RISING_and_FALLING)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	7b1b      	ldrb	r3, [r3, #12]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d115      	bne.n	8000568 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800053c:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <Update_EXTI+0x1d0>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	8812      	ldrh	r2, [r2, #0]
 8000544:	4611      	mov	r1, r2
 8000546:	2201      	movs	r2, #1
 8000548:	408a      	lsls	r2, r1
 800054a:	4611      	mov	r1, r2
 800054c:	4a24      	ldr	r2, [pc, #144]	; (80005e0 <Update_EXTI+0x1d0>)
 800054e:	430b      	orrs	r3, r1
 8000550:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000552:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <Update_EXTI+0x1d0>)
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	8812      	ldrh	r2, [r2, #0]
 800055a:	4611      	mov	r1, r2
 800055c:	2201      	movs	r2, #1
 800055e:	408a      	lsls	r2, r1
 8000560:	4611      	mov	r1, r2
 8000562:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <Update_EXTI+0x1d0>)
 8000564:	430b      	orrs	r3, r1
 8000566:	60d3      	str	r3, [r2, #12]

	}

	//Update IRQ Handling CALLBACK
	GP_IRQ_CALLBACK[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CALLBACK;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	691b      	ldr	r3, [r3, #16]
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <Update_EXTI+0x1d4>)
 8000574:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//Enable/Disable IRQ EXTI & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	7b5b      	ldrb	r3, [r3, #13]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d110      	bne.n	80005a2 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <Update_EXTI+0x1d0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	8812      	ldrh	r2, [r2, #0]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	4611      	mov	r1, r2
 8000590:	4a13      	ldr	r2, [pc, #76]	; (80005e0 <Update_EXTI+0x1d0>)
 8000592:	430b      	orrs	r3, r1
 8000594:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe6a 	bl	8000274 <Enable_NVIC>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);

	}

}
 80005a0:	e010      	b.n	80005c4 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <Update_EXTI+0x1d0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	8812      	ldrh	r2, [r2, #0]
 80005aa:	4611      	mov	r1, r2
 80005ac:	2201      	movs	r2, #1
 80005ae:	408a      	lsls	r2, r1
 80005b0:	43d2      	mvns	r2, r2
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a0a      	ldr	r2, [pc, #40]	; (80005e0 <Update_EXTI+0x1d0>)
 80005b6:	400b      	ands	r3, r1
 80005b8:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff febe 	bl	8000340 <Disable_NVIC>
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40010000 	.word	0x40010000
 80005d0:	40010800 	.word	0x40010800
 80005d4:	40010c00 	.word	0x40010c00
 80005d8:	40011000 	.word	0x40011000
 80005dc:	40011400 	.word	0x40011400
 80005e0:	40010400 	.word	0x40010400
 80005e4:	20000030 	.word	0x20000030

080005e8 <MCAL_EXTI_GPIO_Init>:
* @param [in] 				 -EXTI_Config set by @ref EXTI_define, EXTI_Trigger and EXTI_IRQ_define
* @retval  				     -none
* Note						 -LQFP48 Package has only GPIO A,B,part of C and D
*/
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t * EXTI_Config)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff ff0d 	bl	8000410 <Update_EXTI>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <EXTI0_IRQHandler>:
*================================================================
*                          ISR functions
*================================================================
*/
void EXTI0_IRQHandler (void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<0;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <EXTI0_IRQHandler+0x1c>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <EXTI0_IRQHandler+0x1c>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[0]();
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <EXTI0_IRQHandler+0x20>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4798      	blx	r3
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40010400 	.word	0x40010400
 8000620:	20000030 	.word	0x20000030

08000624 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<1;
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <EXTI1_IRQHandler+0x1c>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <EXTI1_IRQHandler+0x1c>)
 800062e:	f043 0302 	orr.w	r3, r3, #2
 8000632:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[1]();
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <EXTI1_IRQHandler+0x20>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	4798      	blx	r3
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40010400 	.word	0x40010400
 8000644:	20000030 	.word	0x20000030

08000648 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<2;
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <EXTI2_IRQHandler+0x1c>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <EXTI2_IRQHandler+0x1c>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[2]();
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <EXTI2_IRQHandler+0x20>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	4798      	blx	r3
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40010400 	.word	0x40010400
 8000668:	20000030 	.word	0x20000030

0800066c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<3;
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <EXTI3_IRQHandler+0x1c>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <EXTI3_IRQHandler+0x1c>)
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[3]();
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <EXTI3_IRQHandler+0x20>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	4798      	blx	r3
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40010400 	.word	0x40010400
 800068c:	20000030 	.word	0x20000030

08000690 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	//cleared by writting 1 in Pending Register (EXTI_PR)
	EXTI->PR |= 1<<4;
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <EXTI4_IRQHandler+0x1c>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <EXTI4_IRQHandler+0x1c>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6153      	str	r3, [r2, #20]
	// call IRQ_CALL
	GP_IRQ_CALLBACK[4]();
 80006a0:	4b03      	ldr	r3, [pc, #12]	; (80006b0 <EXTI4_IRQHandler+0x20>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4798      	blx	r3
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40010400 	.word	0x40010400
 80006b0:	20000030 	.word	0x20000030

080006b4 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CALLBACK[5](); }
 80006b8:	4b26      	ldr	r3, [pc, #152]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	f003 0320 	and.w	r3, r3, #32
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d008      	beq.n	80006d6 <EXTI9_5_IRQHandler+0x22>
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a22      	ldr	r2, [pc, #136]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	6153      	str	r3, [r2, #20]
 80006d0:	4b21      	ldr	r3, [pc, #132]	; (8000758 <EXTI9_5_IRQHandler+0xa4>)
 80006d2:	695b      	ldr	r3, [r3, #20]
 80006d4:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CALLBACK[6](); }
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d008      	beq.n	80006f4 <EXTI9_5_IRQHandler+0x40>
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 80006e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ec:	6153      	str	r3, [r2, #20]
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <EXTI9_5_IRQHandler+0xa4>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CALLBACK[7](); }
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d008      	beq.n	8000712 <EXTI9_5_IRQHandler+0x5e>
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	4a13      	ldr	r2, [pc, #76]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 8000706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070a:	6153      	str	r3, [r2, #20]
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <EXTI9_5_IRQHandler+0xa4>)
 800070e:	69db      	ldr	r3, [r3, #28]
 8000710:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CALLBACK[8](); }
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800071a:	2b00      	cmp	r3, #0
 800071c:	d008      	beq.n	8000730 <EXTI9_5_IRQHandler+0x7c>
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 8000724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <EXTI9_5_IRQHandler+0xa4>)
 800072c:	6a1b      	ldr	r3, [r3, #32]
 800072e:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CALLBACK[9](); }
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000738:	2b00      	cmp	r3, #0
 800073a:	d008      	beq.n	800074e <EXTI9_5_IRQHandler+0x9a>
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <EXTI9_5_IRQHandler+0xa0>)
 8000742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000746:	6153      	str	r3, [r2, #20]
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <EXTI9_5_IRQHandler+0xa4>)
 800074a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074c:	4798      	blx	r3

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40010400 	.word	0x40010400
 8000758:	20000030 	.word	0x20000030

0800075c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CALLBACK[10](); }
 8000760:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000768:	2b00      	cmp	r3, #0
 800076a:	d008      	beq.n	800077e <EXTI15_10_IRQHandler+0x22>
 800076c:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 800076e:	695b      	ldr	r3, [r3, #20]
 8000770:	4a29      	ldr	r2, [pc, #164]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 8000772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000776:	6153      	str	r3, [r2, #20]
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <EXTI15_10_IRQHandler+0xc0>)
 800077a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800077c:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CALLBACK[11](); }
 800077e:	4b26      	ldr	r3, [pc, #152]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000786:	2b00      	cmp	r3, #0
 8000788:	d008      	beq.n	800079c <EXTI15_10_IRQHandler+0x40>
 800078a:	4b23      	ldr	r3, [pc, #140]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	4a22      	ldr	r2, [pc, #136]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 8000790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000794:	6153      	str	r3, [r2, #20]
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <EXTI15_10_IRQHandler+0xc0>)
 8000798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079a:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CALLBACK[12](); }
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 800079e:	695b      	ldr	r3, [r3, #20]
 80007a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d008      	beq.n	80007ba <EXTI15_10_IRQHandler+0x5e>
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	4a1a      	ldr	r2, [pc, #104]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 80007ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b2:	6153      	str	r3, [r2, #20]
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <EXTI15_10_IRQHandler+0xc0>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CALLBACK[13](); }
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d008      	beq.n	80007d8 <EXTI15_10_IRQHandler+0x7c>
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a13      	ldr	r2, [pc, #76]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 80007cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007d0:	6153      	str	r3, [r2, #20]
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <EXTI15_10_IRQHandler+0xc0>)
 80007d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d6:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CALLBACK[14](); }
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 80007da:	695b      	ldr	r3, [r3, #20]
 80007dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d008      	beq.n	80007f6 <EXTI15_10_IRQHandler+0x9a>
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 80007ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ee:	6153      	str	r3, [r2, #20]
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <EXTI15_10_IRQHandler+0xc0>)
 80007f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007f4:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CALLBACK[15](); }
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d008      	beq.n	8000814 <EXTI15_10_IRQHandler+0xb8>
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4a04      	ldr	r2, [pc, #16]	; (8000818 <EXTI15_10_IRQHandler+0xbc>)
 8000808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800080c:	6153      	str	r3, [r2, #20]
 800080e:	4b03      	ldr	r3, [pc, #12]	; (800081c <EXTI15_10_IRQHandler+0xc0>)
 8000810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000812:	4798      	blx	r3

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40010400 	.word	0x40010400
 800081c:	20000030 	.word	0x20000030

08000820 <Get_CRLH_Position>:
 *      Author: ahmed osama
 */
#include "Stm32_F103C6_gpio_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	2b80      	cmp	r3, #128	; 0x80
 800082e:	d042      	beq.n	80008b6 <Get_CRLH_Position+0x96>
 8000830:	2b80      	cmp	r3, #128	; 0x80
 8000832:	dc11      	bgt.n	8000858 <Get_CRLH_Position+0x38>
 8000834:	2b08      	cmp	r3, #8
 8000836:	d036      	beq.n	80008a6 <Get_CRLH_Position+0x86>
 8000838:	2b08      	cmp	r3, #8
 800083a:	dc06      	bgt.n	800084a <Get_CRLH_Position+0x2a>
 800083c:	2b02      	cmp	r3, #2
 800083e:	d02e      	beq.n	800089e <Get_CRLH_Position+0x7e>
 8000840:	2b04      	cmp	r3, #4
 8000842:	d02e      	beq.n	80008a2 <Get_CRLH_Position+0x82>
 8000844:	2b01      	cmp	r3, #1
 8000846:	d028      	beq.n	800089a <Get_CRLH_Position+0x7a>
 8000848:	e047      	b.n	80008da <Get_CRLH_Position+0xba>
 800084a:	2b20      	cmp	r3, #32
 800084c:	d02f      	beq.n	80008ae <Get_CRLH_Position+0x8e>
 800084e:	2b40      	cmp	r3, #64	; 0x40
 8000850:	d02f      	beq.n	80008b2 <Get_CRLH_Position+0x92>
 8000852:	2b10      	cmp	r3, #16
 8000854:	d029      	beq.n	80008aa <Get_CRLH_Position+0x8a>
 8000856:	e040      	b.n	80008da <Get_CRLH_Position+0xba>
 8000858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800085c:	d033      	beq.n	80008c6 <Get_CRLH_Position+0xa6>
 800085e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000862:	dc09      	bgt.n	8000878 <Get_CRLH_Position+0x58>
 8000864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000868:	d029      	beq.n	80008be <Get_CRLH_Position+0x9e>
 800086a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800086e:	d028      	beq.n	80008c2 <Get_CRLH_Position+0xa2>
 8000870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000874:	d021      	beq.n	80008ba <Get_CRLH_Position+0x9a>
 8000876:	e030      	b.n	80008da <Get_CRLH_Position+0xba>
 8000878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800087c:	d027      	beq.n	80008ce <Get_CRLH_Position+0xae>
 800087e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000882:	dc03      	bgt.n	800088c <Get_CRLH_Position+0x6c>
 8000884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000888:	d01f      	beq.n	80008ca <Get_CRLH_Position+0xaa>
 800088a:	e026      	b.n	80008da <Get_CRLH_Position+0xba>
 800088c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000890:	d01f      	beq.n	80008d2 <Get_CRLH_Position+0xb2>
 8000892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000896:	d01e      	beq.n	80008d6 <Get_CRLH_Position+0xb6>
 8000898:	e01f      	b.n	80008da <Get_CRLH_Position+0xba>
	{
		case GPIO_PIN_0 : return 0;  break;
 800089a:	2300      	movs	r3, #0
 800089c:	e01e      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_1 : return 4;  break;
 800089e:	2304      	movs	r3, #4
 80008a0:	e01c      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_2 : return 8;  break;
 80008a2:	2308      	movs	r3, #8
 80008a4:	e01a      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_3 : return 12; break;
 80008a6:	230c      	movs	r3, #12
 80008a8:	e018      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_4 : return 16; break;
 80008aa:	2310      	movs	r3, #16
 80008ac:	e016      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_5 : return 20; break;
 80008ae:	2314      	movs	r3, #20
 80008b0:	e014      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_6 : return 24; break;
 80008b2:	2318      	movs	r3, #24
 80008b4:	e012      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_7 : return 28; break;
 80008b6:	231c      	movs	r3, #28
 80008b8:	e010      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_8 : return 0;  break;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e00e      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_9 : return 4;  break;
 80008be:	2304      	movs	r3, #4
 80008c0:	e00c      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_10: return 8;  break;
 80008c2:	2308      	movs	r3, #8
 80008c4:	e00a      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_11: return 12; break;
 80008c6:	230c      	movs	r3, #12
 80008c8:	e008      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_12: return 16; break;
 80008ca:	2310      	movs	r3, #16
 80008cc:	e006      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_13: return 20; break;
 80008ce:	2314      	movs	r3, #20
 80008d0:	e004      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_14: return 24; break;
 80008d2:	2318      	movs	r3, #24
 80008d4:	e002      	b.n	80008dc <Get_CRLH_Position+0xbc>
		case GPIO_PIN_15: return 28; break;
 80008d6:	231c      	movs	r3, #28
 80008d8:	e000      	b.n	80008dc <Get_CRLH_Position+0xbc>
	}
	return 0;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <MCAL_GPIO_Init>:

void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PConfig_t* PinConfig)
{
 80008e6:	b590      	push	{r4, r7, lr}
 80008e8:	b085      	sub	sp, #20
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	6039      	str	r1, [r7, #0]
	uint8_t PIN_Config=0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	73fb      	strb	r3, [r7, #15]

	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 to 7
	//Port configuration register high (GPIOx_CRH) Configure PINS from 8 to 15
	volatile uint32_t* Config_Register=NULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
	Config_Register= (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	2bff      	cmp	r3, #255	; 0xff
 80008fe:	d801      	bhi.n	8000904 <MCAL_GPIO_Init+0x1e>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	e001      	b.n	8000908 <MCAL_GPIO_Init+0x22>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3304      	adds	r3, #4
 8000908:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] MODE[0:0]
	*(Config_Register) &= ~ (0xf<< Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff86 	bl	8000820 <Get_CRLH_Position>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	230f      	movs	r3, #15
 800091a:	4093      	lsls	r3, r2
 800091c:	43da      	mvns	r2, r3
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	401a      	ands	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	601a      	str	r2, [r3, #0]

	//if pin is output
	if(PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_PP || PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_OD ||  PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_PP || PinConfig->GPIO_MODE==GPIO_MODE_OUTPUT_AF_OD  )
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	789b      	ldrb	r3, [r3, #2]
 800092c:	2b04      	cmp	r3, #4
 800092e:	d00b      	beq.n	8000948 <MCAL_GPIO_Init+0x62>
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	789b      	ldrb	r3, [r3, #2]
 8000934:	2b05      	cmp	r3, #5
 8000936:	d007      	beq.n	8000948 <MCAL_GPIO_Init+0x62>
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	789b      	ldrb	r3, [r3, #2]
 800093c:	2b06      	cmp	r3, #6
 800093e:	d003      	beq.n	8000948 <MCAL_GPIO_Init+0x62>
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	789b      	ldrb	r3, [r3, #2]
 8000944:	2b07      	cmp	r3, #7
 8000946:	d10e      	bne.n	8000966 <MCAL_GPIO_Init+0x80>
	{
		//set CNF[1:0] MODE[1:0]
		PIN_Config =( (((PinConfig->GPIO_MODE - 4) << 2 )| (PinConfig->GPIO_Output_SPeed)) & 0x0F);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	789b      	ldrb	r3, [r3, #2]
 800094c:	3b04      	subs	r3, #4
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	b25a      	sxtb	r2, r3
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	78db      	ldrb	r3, [r3, #3]
 8000956:	b25b      	sxtb	r3, r3
 8000958:	4313      	orrs	r3, r2
 800095a:	b25b      	sxtb	r3, r3
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	e02c      	b.n	80009c0 <MCAL_GPIO_Init+0xda>
	}

	//if pin is input
	else //MODE = 00: Input mode (reset state)
	{
		if(PinConfig->GPIO_MODE==GPIO_MODE_Analog || PinConfig->GPIO_MODE==GPIO_MODE_INPUT_FLO)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	789b      	ldrb	r3, [r3, #2]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <MCAL_GPIO_Init+0x90>
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	789b      	ldrb	r3, [r3, #2]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d107      	bne.n	8000986 <MCAL_GPIO_Init+0xa0>
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((PinConfig->GPIO_MODE) << 2 )| 0x0) & 0x0F);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	789b      	ldrb	r3, [r3, #2]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	73fb      	strb	r3, [r7, #15]
 8000984:	e01c      	b.n	80009c0 <MCAL_GPIO_Init+0xda>

		}
		else if(PinConfig->GPIO_MODE==GPIO_MODE_INPUT_AF)                   //consider it input floating
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	789b      	ldrb	r3, [r3, #2]
 800098a:	2b08      	cmp	r3, #8
 800098c:	d102      	bne.n	8000994 <MCAL_GPIO_Init+0xae>
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((GPIO_MODE_INPUT_FLO) << 2 )| (0x0)) & 0x0F);
 800098e:	2304      	movs	r3, #4
 8000990:	73fb      	strb	r3, [r7, #15]
 8000992:	e015      	b.n	80009c0 <MCAL_GPIO_Init+0xda>

		}
		else
		{
			//set CNF[1:0] MODE[1:0]
			PIN_Config =( (((GPIO_MODE_INPUT_PU) << 2 )| (0x0)) & 0x0F);
 8000994:	2308      	movs	r3, #8
 8000996:	73fb      	strb	r3, [r7, #15]
			//PD or PP
			if(PinConfig->GPIO_MODE==GPIO_MODE_INPUT_PU)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	789b      	ldrb	r3, [r3, #2]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d107      	bne.n	80009b0 <MCAL_GPIO_Init+0xca>
			{
				//in Table 20. port bit configuration table set PxODR 1 for input pull_up
				GPIOx->ODR |=  PinConfig->GPIO_PinNumber;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	8812      	ldrh	r2, [r2, #0]
 80009a8:	431a      	orrs	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	e007      	b.n	80009c0 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//in Table 20. port bit configuration table set PxODR 0 for input pull_down
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	683a      	ldr	r2, [r7, #0]
 80009b6:	8812      	ldrh	r2, [r2, #0]
 80009b8:	43d2      	mvns	r2, r2
 80009ba:	401a      	ands	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//write on CRL or CRH
	*(Config_Register) |= PIN_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber);
 80009c0:	7bfc      	ldrb	r4, [r7, #15]
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff2a 	bl	8000820 <Get_CRLH_Position>
 80009cc:	4603      	mov	r3, r0
 80009ce:	fa04 f203 	lsl.w	r2, r4, r3
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	431a      	orrs	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	601a      	str	r2, [r3, #0]

}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd90      	pop	{r4, r7, pc}

080009e4 <SPI1_IRQHandler>:
 *                         IRQ
 * ===========================================================
 */

void SPI1_IRQHandler (void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack(irq_src);
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <SPI1_IRQHandler+0x18>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	7938      	ldrb	r0, [r7, #4]
 80009f2:	4798      	blx	r3

}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000024 	.word	0x20000024

08000a00 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack(irq_src);
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <SPI2_IRQHandler+0x18>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	7938      	ldrb	r0, [r7, #4]
 8000a0e:	4798      	blx	r3
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000024 	.word	0x20000024

08000a1c <USART1_IRQHandler>:
                itr++;
            }
}
//ISR
void USART1_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000a20:	4b02      	ldr	r3, [pc, #8]	; (8000a2c <USART1_IRQHandler+0x10>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	691b      	ldr	r3, [r3, #16]
 8000a26:	4798      	blx	r3
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000002c 	.word	0x2000002c

08000a30 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <USART2_IRQHandler+0x10>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	691b      	ldr	r3, [r3, #16]
 8000a3a:	4798      	blx	r3
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000002c 	.word	0x2000002c

08000a44 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	Global_UART_config->P_IRQ_CallBack();
 8000a48:	4b02      	ldr	r3, [pc, #8]	; (8000a54 <USART3_IRQHandler+0x10>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	691b      	ldr	r3, [r3, #16]
 8000a4e:	4798      	blx	r3
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000002c 	.word	0x2000002c

08000a58 <__libc_init_array>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	2500      	movs	r5, #0
 8000a5c:	4e0c      	ldr	r6, [pc, #48]	; (8000a90 <__libc_init_array+0x38>)
 8000a5e:	4c0d      	ldr	r4, [pc, #52]	; (8000a94 <__libc_init_array+0x3c>)
 8000a60:	1ba4      	subs	r4, r4, r6
 8000a62:	10a4      	asrs	r4, r4, #2
 8000a64:	42a5      	cmp	r5, r4
 8000a66:	d109      	bne.n	8000a7c <__libc_init_array+0x24>
 8000a68:	f000 f81a 	bl	8000aa0 <_init>
 8000a6c:	2500      	movs	r5, #0
 8000a6e:	4e0a      	ldr	r6, [pc, #40]	; (8000a98 <__libc_init_array+0x40>)
 8000a70:	4c0a      	ldr	r4, [pc, #40]	; (8000a9c <__libc_init_array+0x44>)
 8000a72:	1ba4      	subs	r4, r4, r6
 8000a74:	10a4      	asrs	r4, r4, #2
 8000a76:	42a5      	cmp	r5, r4
 8000a78:	d105      	bne.n	8000a86 <__libc_init_array+0x2e>
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a80:	4798      	blx	r3
 8000a82:	3501      	adds	r5, #1
 8000a84:	e7ee      	b.n	8000a64 <__libc_init_array+0xc>
 8000a86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a8a:	4798      	blx	r3
 8000a8c:	3501      	adds	r5, #1
 8000a8e:	e7f2      	b.n	8000a76 <__libc_init_array+0x1e>
 8000a90:	08000ac4 	.word	0x08000ac4
 8000a94:	08000ac4 	.word	0x08000ac4
 8000a98:	08000ac4 	.word	0x08000ac4
 8000a9c:	08000ac8 	.word	0x08000ac8

08000aa0 <_init>:
 8000aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa2:	bf00      	nop
 8000aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aa6:	bc08      	pop	{r3}
 8000aa8:	469e      	mov	lr, r3
 8000aaa:	4770      	bx	lr

08000aac <_fini>:
 8000aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aae:	bf00      	nop
 8000ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ab2:	bc08      	pop	{r3}
 8000ab4:	469e      	mov	lr, r3
 8000ab6:	4770      	bx	lr
